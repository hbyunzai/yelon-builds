import { isObservable } from 'rxjs';
function throwError(msg, actual, expected, comparison) {
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
        throw new Error(`ASSERTION ERROR: ${msg}${comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`}`);
    }
}
/**
 * Assert whether the expression and throw an error into console in dev mode
 *
 * 断言表达式是否符合预期，并在开发模式下会在控制台抛出一个错误
 */
export function assert(expression, msg) {
    if (!expression) {
        throwError(msg);
    }
}
/**
 * Assert whether empty (`null` or `undefined`)
 *
 * 断言是否空值（`null` 或 `undefined`）
 */
export function assertEmpty(actual, msg) {
    if (actual == null) {
        throwError(msg, typeof actual, 'NULL', '==');
    }
}
/**
 * Assert whether `number` type
 *
 * 断言是否 `number` 类型
 */
export function assertNumber(actual, msg) {
    if (!(typeof actual === 'number')) {
        throwError(msg, typeof actual, 'number', '===');
    }
}
/**
 * Assert whether `string` type
 *
 * 断言是否 `string` 类型
 */
export function assertString(actual, msg) {
    if (!(typeof actual === 'string')) {
        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
    }
}
/**
 * Assert whether `array` type
 *
 * 断言是否 `array` 类型
 */
export function assertArray(actual, msg) {
    if (!Array.isArray(actual)) {
        throwError(msg, actual === null ? 'null' : typeof actual, 'array', '===');
    }
}
/**
 * Assert whether `Observable` type
 *
 * 断言是否 `Observable` 类型
 */
export function assertObservable(obj, msg) {
    if (!isObservable(obj)) {
        throwError(msg, obj === null ? 'null' : typeof obj, 'Observable', '===');
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvdXRpbC9vdGhlci9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLE1BQU0sQ0FBQztBQU1wQyxTQUFTLFVBQVUsQ0FBQyxHQUE4QixFQUFFLE1BQWdCLEVBQUUsUUFBa0IsRUFBRSxVQUFtQjtJQUMzRyxJQUFJLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLEVBQUUsQ0FBQztRQUNsRCxNQUFNLElBQUksS0FBSyxDQUNiLG9CQUFvQixHQUFHLEdBQUcsVUFBVSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsUUFBUSxJQUFJLFVBQVUsSUFBSSxNQUFNLFlBQVksRUFBRSxDQUNuSCxDQUFDO0lBQ0osQ0FBQztBQUNILENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLE1BQU0sQ0FBQyxVQUFtQixFQUFFLEdBQVk7SUFDdEQsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2hCLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0FBQ0gsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWUsRUFBRSxHQUFZO0lBQ3ZELElBQUksTUFBTSxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ25CLFVBQVUsQ0FBQyxHQUFHLEVBQUUsT0FBTyxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7QUFDSCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBZSxFQUFFLEdBQVk7SUFDeEQsSUFBSSxDQUFDLENBQUMsT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUNsQyxVQUFVLENBQUMsR0FBRyxFQUFFLE9BQU8sTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRCxDQUFDO0FBQ0gsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUFDLE1BQWUsRUFBRSxHQUFZO0lBQ3hELElBQUksQ0FBQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDbEMsVUFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM3RSxDQUFDO0FBQ0gsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQWUsRUFBRSxHQUFZO0lBQ3ZELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUM7UUFDM0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxNQUFNLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1RSxDQUFDO0FBQ0gsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsR0FBWSxFQUFFLEdBQVk7SUFDekQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ3ZCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxLQUFLLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLEdBQUcsRUFBRSxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDM0UsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc09ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSBjb25zdCBuZ0Rldk1vZGU6IGJvb2xlYW47XG5cbmZ1bmN0aW9uIHRocm93RXJyb3IobXNnOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkKTogdm9pZDtcbmZ1bmN0aW9uIHRocm93RXJyb3IobXNnOiBzdHJpbmcgfCBudWxsIHwgdW5kZWZpbmVkLCBhY3R1YWw6IHVua25vd24sIGV4cGVjdGVkOiB1bmtub3duLCBjb21wYXJpc29uOiBzdHJpbmcpOiB2b2lkO1xuZnVuY3Rpb24gdGhyb3dFcnJvcihtc2c6IHN0cmluZyB8IG51bGwgfCB1bmRlZmluZWQsIGFjdHVhbD86IHVua25vd24sIGV4cGVjdGVkPzogdW5rbm93biwgY29tcGFyaXNvbj86IHN0cmluZyk6IHZvaWQge1xuICBpZiAodHlwZW9mIG5nRGV2TW9kZSA9PT0gJ3VuZGVmaW5lZCcgfHwgbmdEZXZNb2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYEFTU0VSVElPTiBFUlJPUjogJHttc2d9JHtjb21wYXJpc29uID09IG51bGwgPyAnJyA6IGAgW0V4cGVjdGVkPT4gJHtleHBlY3RlZH0gJHtjb21wYXJpc29ufSAke2FjdHVhbH0gPD1BY3R1YWxdYH1gXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIHRoZSBleHByZXNzaW9uIGFuZCB0aHJvdyBhbiBlcnJvciBpbnRvIGNvbnNvbGUgaW4gZGV2IG1vZGVcbiAqXG4gKiDmlq3oqIDooajovr7lvI/mmK/lkKbnrKblkIjpooTmnJ/vvIzlubblnKjlvIDlj5HmqKHlvI/kuIvkvJrlnKjmjqfliLblj7Dmipvlh7rkuIDkuKrplJnor69cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChleHByZXNzaW9uOiBib29sZWFuLCBtc2c/OiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFleHByZXNzaW9uKSB7XG4gICAgdGhyb3dFcnJvcihtc2cpO1xuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgZW1wdHkgKGBudWxsYCBvciBgdW5kZWZpbmVkYClcbiAqXG4gKiDmlq3oqIDmmK/lkKbnqbrlgLzvvIhgbnVsbGAg5oiWIGB1bmRlZmluZWRg77yJXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRFbXB0eShhY3R1YWw6IHVua25vd24sIG1zZz86IHN0cmluZyk6IHZvaWQge1xuICBpZiAoYWN0dWFsID09IG51bGwpIHtcbiAgICB0aHJvd0Vycm9yKG1zZywgdHlwZW9mIGFjdHVhbCwgJ05VTEwnLCAnPT0nKTtcbiAgfVxufVxuXG4vKipcbiAqIEFzc2VydCB3aGV0aGVyIGBudW1iZXJgIHR5cGVcbiAqXG4gKiDmlq3oqIDmmK/lkKYgYG51bWJlcmAg57G75Z6LXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnROdW1iZXIoYWN0dWFsOiB1bmtub3duLCBtc2c/OiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCEodHlwZW9mIGFjdHVhbCA9PT0gJ251bWJlcicpKSB7XG4gICAgdGhyb3dFcnJvcihtc2csIHR5cGVvZiBhY3R1YWwsICdudW1iZXInLCAnPT09Jyk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBgc3RyaW5nYCB0eXBlXG4gKlxuICog5pat6KiA5piv5ZCmIGBzdHJpbmdgIOexu+Wei1xuICovXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0U3RyaW5nKGFjdHVhbDogdW5rbm93biwgbXNnPzogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghKHR5cGVvZiBhY3R1YWwgPT09ICdzdHJpbmcnKSkge1xuICAgIHRocm93RXJyb3IobXNnLCBhY3R1YWwgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0dWFsLCAnc3RyaW5nJywgJz09PScpO1xuICB9XG59XG5cbi8qKlxuICogQXNzZXJ0IHdoZXRoZXIgYGFycmF5YCB0eXBlXG4gKlxuICog5pat6KiA5piv5ZCmIGBhcnJheWAg57G75Z6LXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBcnJheShhY3R1YWw6IHVua25vd24sIG1zZz86IHN0cmluZyk6IHZvaWQge1xuICBpZiAoIUFycmF5LmlzQXJyYXkoYWN0dWFsKSkge1xuICAgIHRocm93RXJyb3IobXNnLCBhY3R1YWwgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgYWN0dWFsLCAnYXJyYXknLCAnPT09Jyk7XG4gIH1cbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBgT2JzZXJ2YWJsZWAgdHlwZVxuICpcbiAqIOaWreiogOaYr+WQpiBgT2JzZXJ2YWJsZWAg57G75Z6LXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRPYnNlcnZhYmxlKG9iajogdW5rbm93biwgbXNnPzogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghaXNPYnNlcnZhYmxlKG9iaikpIHtcbiAgICB0aHJvd0Vycm9yKG1zZywgb2JqID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIG9iaiwgJ09ic2VydmFibGUnLCAnPT09Jyk7XG4gIH1cbn1cbiJdfQ==