import { addDays, endOfDay, endOfMonth, endOfWeek, endOfYear, parse, parseISO, startOfDay, startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears, format, formatDistanceToNow } from 'date-fns';
/**
 * Get the time range, return `[ Date, Date]` for the start and end dates
 *
 * 获取时间范围
 *
 * @param type 类型，带 `-` 表示过去一个时间，若指定 `number` 表示天数
 * @param time 开始时间
 * @param ignoreMaxTime 忽略追加结束日期的最大时间值
 */
export function getTimeDistance(type, time, options) {
    time = time
        ? typeof time === 'string'
            ? parse(time, 'yyyy-MM-dd HH:mm:ss', new Date())
            : new Date(time)
        : new Date();
    const opt = { weekStartsOn: 1 };
    let res;
    switch (type) {
        case 'today':
            res = [time, time];
            break;
        case '-today':
            res = [addDays(time, -1), time];
            break;
        case 'yesterday':
            res = [addDays(time, -1), addDays(time, -1)];
            break;
        case 'week':
            res = [startOfWeek(time, opt), endOfWeek(time, opt)];
            break;
        case '-week':
            res = [startOfWeek(subWeeks(time, 1), opt), endOfWeek(subWeeks(time, 1), opt)];
            break;
        case 'month':
            res = [startOfMonth(time), endOfMonth(time)];
            break;
        case '-month':
            res = [startOfMonth(subMonths(time, 1)), endOfMonth(subMonths(time, 1))];
            break;
        case 'year':
            res = [startOfYear(time), endOfYear(time)];
            break;
        case '-year':
            res = [startOfYear(subYears(time, 1)), endOfYear(subYears(time, 1))];
            break;
        default:
            res = type > 0 ? [time, addDays(time, type)] : [addDays(time, type), time];
            break;
    }
    return options?.ignoreMaxTime ? res : fixEndTimeOfRange(res);
}
/**
 * fix time is the most, big value
 */
export function fixEndTimeOfRange(dates) {
    return [startOfDay(dates[0]), endOfDay(dates[1])];
}
/**
 * Convert to `Date` format
 *
 * @param value When is a number, it's treated as a timestamp; If it's seconds, you need to provide the `options.timestampSecond` parameter.
 */
export function toDate(value, options) {
    const { formatString, defaultValue, timestampSecond } = {
        formatString: 'yyyy-MM-dd HH:mm:ss',
        defaultValue: new Date(NaN),
        timestampSecond: false,
        ...(typeof options === 'string' ? { formatString: options } : options)
    };
    if (value == null) {
        return defaultValue;
    }
    if (value instanceof Date) {
        return value;
    }
    if (typeof value === 'number' || (typeof value === 'string' && /^[0-9]+$/.test(value))) {
        const valueNumber = +value;
        return new Date(timestampSecond ? valueNumber * 1000 : valueNumber);
    }
    let tryDate = parseISO(value);
    if (isNaN(tryDate)) {
        tryDate = parse(value, formatString, new Date());
    }
    return isNaN(tryDate) ? defaultValue : tryDate;
}
/**
 * Format date, supports `Date, number, string` types
 *
 * @param value When is a number, it is treated as a timestamp (Support seconds and milliseconds timestamp).
 * @param formatString Please refer to [date-fnd format](https://date-fns.org/v2.30.0/docs/format) for string format
 * @param dateLocale Recommended to be consistent with NG-ZORRO by using `inject(NZ_DATE_LOCALE)`
 */
export function formatDate(value, formatString, dateLocale) {
    value = toDate(value);
    if (isNaN(value))
        return '';
    const langOpt = { locale: dateLocale };
    return formatString === 'fn' ? formatDistanceToNow(value, langOpt) : format(value, formatString, langOpt);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3V0aWwvZGF0ZS10aW1lL3RpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFNBQVMsRUFDVCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsRUFDUixVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxXQUFXLEVBQ1gsU0FBUyxFQUNULFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLG1CQUFtQixFQUNwQixNQUFNLFVBQVUsQ0FBQztBQUtsQjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQzdCLElBQTBHLEVBQzFHLElBQTZCLEVBQzdCLE9BQXFDO0lBRXJDLElBQUksR0FBRyxJQUFJO1FBQ1QsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNoRCxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2YsTUFBTSxHQUFHLEdBQXdCLEVBQUUsWUFBWSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBRXJELElBQUksR0FBaUIsQ0FBQztJQUN0QixRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2IsS0FBSyxPQUFPO1lBQ1YsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25CLE1BQU07UUFDUixLQUFLLFFBQVE7WUFDWCxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEMsTUFBTTtRQUNSLEtBQUssV0FBVztZQUNkLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNO1FBQ1IsS0FBSyxNQUFNO1lBQ1QsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTTtRQUNSLEtBQUssT0FBTztZQUNWLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0UsTUFBTTtRQUNSLEtBQUssT0FBTztZQUNWLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNO1FBQ1IsS0FBSyxRQUFRO1lBQ1gsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekUsTUFBTTtRQUNSLEtBQUssTUFBTTtZQUNULEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNO1FBQ1IsS0FBSyxPQUFPO1lBQ1YsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckUsTUFBTTtRQUNSO1lBQ0UsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNFLE1BQU07SUFDVixDQUFDO0lBQ0QsT0FBTyxPQUFPLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9ELENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxLQUFtQjtJQUNuRCxPQUFPLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFVRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLE1BQU0sQ0FBQyxLQUFxQyxFQUFFLE9BQWdDO0lBQzVGLE1BQU0sRUFBRSxZQUFZLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBRSxHQUFHO1FBQ3RELFlBQVksRUFBRSxxQkFBcUI7UUFDbkMsWUFBWSxFQUFFLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUMzQixlQUFlLEVBQUUsS0FBSztRQUN0QixHQUFHLENBQUMsT0FBTyxPQUFPLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0tBQ3ZFLENBQUM7SUFDRixJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUUsQ0FBQztRQUNsQixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFLENBQUM7UUFDMUIsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkYsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDM0IsT0FBTyxJQUFJLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFDRCxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsSUFBSSxLQUFLLENBQUMsT0FBb0IsQ0FBQyxFQUFFLENBQUM7UUFDaEMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLEVBQUUsWUFBYSxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBRUQsT0FBTyxLQUFLLENBQUMsT0FBb0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztBQUM5RCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxLQUE2QixFQUFFLFlBQW9CLEVBQUUsVUFBdUI7SUFDckcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN0QixJQUFJLEtBQUssQ0FBQyxLQUFrQixDQUFDO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFFekMsTUFBTSxPQUFPLEdBQUcsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLENBQUM7SUFDdkMsT0FBTyxZQUFZLEtBQUssSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVHLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBhZGREYXlzLFxuICBlbmRPZkRheSxcbiAgZW5kT2ZNb250aCxcbiAgZW5kT2ZXZWVrLFxuICBlbmRPZlllYXIsXG4gIHBhcnNlLFxuICBwYXJzZUlTTyxcbiAgc3RhcnRPZkRheSxcbiAgc3RhcnRPZk1vbnRoLFxuICBzdGFydE9mV2VlayxcbiAgc3RhcnRPZlllYXIsXG4gIHN1Yk1vbnRocyxcbiAgc3ViV2Vla3MsXG4gIHN1YlllYXJzLFxuICBmb3JtYXQsXG4gIGZvcm1hdERpc3RhbmNlVG9Ob3dcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5pbXBvcnQgdHlwZSB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5pbXBvcnQgeyBEYXRlTG9jYWxlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pMThuJztcblxuLyoqXG4gKiBHZXQgdGhlIHRpbWUgcmFuZ2UsIHJldHVybiBgWyBEYXRlLCBEYXRlXWAgZm9yIHRoZSBzdGFydCBhbmQgZW5kIGRhdGVzXG4gKlxuICog6I635Y+W5pe26Ze06IyD5Zu0XG4gKlxuICogQHBhcmFtIHR5cGUg57G75Z6L77yM5bimIGAtYCDooajnpLrov4fljrvkuIDkuKrml7bpl7TvvIzoi6XmjIflrpogYG51bWJlcmAg6KGo56S65aSp5pWwXG4gKiBAcGFyYW0gdGltZSDlvIDlp4vml7bpl7RcbiAqIEBwYXJhbSBpZ25vcmVNYXhUaW1lIOW/veeVpei/veWKoOe7k+adn+aXpeacn+eahOacgOWkp+aXtumXtOWAvFxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGltZURpc3RhbmNlKFxuICB0eXBlOiAndG9kYXknIHwgJy10b2RheScgfCAneWVzdGVyZGF5JyB8ICd3ZWVrJyB8ICctd2VlaycgfCAnbW9udGgnIHwgJy1tb250aCcgfCAneWVhcicgfCAnLXllYXInIHwgbnVtYmVyLFxuICB0aW1lPzogRGF0ZSB8IHN0cmluZyB8IG51bWJlcixcbiAgb3B0aW9ucz86IHsgaWdub3JlTWF4VGltZT86IGJvb2xlYW4gfVxuKTogW0RhdGUsIERhdGVdIHtcbiAgdGltZSA9IHRpbWVcbiAgICA/IHR5cGVvZiB0aW1lID09PSAnc3RyaW5nJ1xuICAgICAgPyBwYXJzZSh0aW1lLCAneXl5eS1NTS1kZCBISDptbTpzcycsIG5ldyBEYXRlKCkpXG4gICAgICA6IG5ldyBEYXRlKHRpbWUpXG4gICAgOiBuZXcgRGF0ZSgpO1xuICBjb25zdCBvcHQ6IHsgd2Vla1N0YXJ0c09uOiAxIH0gPSB7IHdlZWtTdGFydHNPbjogMSB9O1xuXG4gIGxldCByZXM6IFtEYXRlLCBEYXRlXTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAndG9kYXknOlxuICAgICAgcmVzID0gW3RpbWUsIHRpbWVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnLXRvZGF5JzpcbiAgICAgIHJlcyA9IFthZGREYXlzKHRpbWUsIC0xKSwgdGltZV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICd5ZXN0ZXJkYXknOlxuICAgICAgcmVzID0gW2FkZERheXModGltZSwgLTEpLCBhZGREYXlzKHRpbWUsIC0xKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICd3ZWVrJzpcbiAgICAgIHJlcyA9IFtzdGFydE9mV2Vlayh0aW1lLCBvcHQpLCBlbmRPZldlZWsodGltZSwgb3B0KV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICctd2Vlayc6XG4gICAgICByZXMgPSBbc3RhcnRPZldlZWsoc3ViV2Vla3ModGltZSwgMSksIG9wdCksIGVuZE9mV2VlayhzdWJXZWVrcyh0aW1lLCAxKSwgb3B0KV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICdtb250aCc6XG4gICAgICByZXMgPSBbc3RhcnRPZk1vbnRoKHRpbWUpLCBlbmRPZk1vbnRoKHRpbWUpXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJy1tb250aCc6XG4gICAgICByZXMgPSBbc3RhcnRPZk1vbnRoKHN1Yk1vbnRocyh0aW1lLCAxKSksIGVuZE9mTW9udGgoc3ViTW9udGhzKHRpbWUsIDEpKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICd5ZWFyJzpcbiAgICAgIHJlcyA9IFtzdGFydE9mWWVhcih0aW1lKSwgZW5kT2ZZZWFyKHRpbWUpXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJy15ZWFyJzpcbiAgICAgIHJlcyA9IFtzdGFydE9mWWVhcihzdWJZZWFycyh0aW1lLCAxKSksIGVuZE9mWWVhcihzdWJZZWFycyh0aW1lLCAxKSldO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJlcyA9IHR5cGUgPiAwID8gW3RpbWUsIGFkZERheXModGltZSwgdHlwZSldIDogW2FkZERheXModGltZSwgdHlwZSksIHRpbWVdO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM/Lmlnbm9yZU1heFRpbWUgPyByZXMgOiBmaXhFbmRUaW1lT2ZSYW5nZShyZXMpO1xufVxuXG4vKipcbiAqIGZpeCB0aW1lIGlzIHRoZSBtb3N0LCBiaWcgdmFsdWVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpeEVuZFRpbWVPZlJhbmdlKGRhdGVzOiBbRGF0ZSwgRGF0ZV0pOiBbRGF0ZSwgRGF0ZV0ge1xuICByZXR1cm4gW3N0YXJ0T2ZEYXkoZGF0ZXNbMF0pLCBlbmRPZkRheShkYXRlc1sxXSldO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRvRGF0ZU9wdGlvbnMge1xuICAvKiogSWYgcGFyc2luZyBmYWlscyB0cnkgdG8gcGFyc2UgdGhlIGRhdGUgYnkgcHJlc3NpbmcgYGZvcm1hdFN0cmluZ2AgKi9cbiAgZm9ybWF0U3RyaW5nPzogc3RyaW5nO1xuICAvKiogSWYgcGFyc2luZyBmYWlscyByZXR1cm5lZCBkZWZhdWx0IHZhbHVlLCBkZWZhdWx0OiBgbmV3IERhdGUoTmFOKWAgKi9cbiAgZGVmYXVsdFZhbHVlPzogTnpTYWZlQW55O1xuICB0aW1lc3RhbXBTZWNvbmQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENvbnZlcnQgdG8gYERhdGVgIGZvcm1hdFxuICpcbiAqIEBwYXJhbSB2YWx1ZSBXaGVuIGlzIGEgbnVtYmVyLCBpdCdzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXA7IElmIGl0J3Mgc2Vjb25kcywgeW91IG5lZWQgdG8gcHJvdmlkZSB0aGUgYG9wdGlvbnMudGltZXN0YW1wU2Vjb25kYCBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b0RhdGUodmFsdWU/OiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyIHwgbnVsbCwgb3B0aW9ucz86IHN0cmluZyB8IFRvRGF0ZU9wdGlvbnMpOiBEYXRlIHtcbiAgY29uc3QgeyBmb3JtYXRTdHJpbmcsIGRlZmF1bHRWYWx1ZSwgdGltZXN0YW1wU2Vjb25kIH0gPSB7XG4gICAgZm9ybWF0U3RyaW5nOiAneXl5eS1NTS1kZCBISDptbTpzcycsXG4gICAgZGVmYXVsdFZhbHVlOiBuZXcgRGF0ZShOYU4pLFxuICAgIHRpbWVzdGFtcFNlY29uZDogZmFsc2UsXG4gICAgLi4uKHR5cGVvZiBvcHRpb25zID09PSAnc3RyaW5nJyA/IHsgZm9ybWF0U3RyaW5nOiBvcHRpb25zIH0gOiBvcHRpb25zKVxuICB9O1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRGF0ZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fCAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAvXlswLTldKyQvLnRlc3QodmFsdWUpKSkge1xuICAgIGNvbnN0IHZhbHVlTnVtYmVyID0gK3ZhbHVlO1xuICAgIHJldHVybiBuZXcgRGF0ZSh0aW1lc3RhbXBTZWNvbmQgPyB2YWx1ZU51bWJlciAqIDEwMDAgOiB2YWx1ZU51bWJlcik7XG4gIH1cbiAgbGV0IHRyeURhdGUgPSBwYXJzZUlTTyh2YWx1ZSk7XG4gIGlmIChpc05hTih0cnlEYXRlIGFzIE56U2FmZUFueSkpIHtcbiAgICB0cnlEYXRlID0gcGFyc2UodmFsdWUsIGZvcm1hdFN0cmluZyEsIG5ldyBEYXRlKCkpO1xuICB9XG5cbiAgcmV0dXJuIGlzTmFOKHRyeURhdGUgYXMgTnpTYWZlQW55KSA/IGRlZmF1bHRWYWx1ZSA6IHRyeURhdGU7XG59XG5cbi8qKlxuICogRm9ybWF0IGRhdGUsIHN1cHBvcnRzIGBEYXRlLCBudW1iZXIsIHN0cmluZ2AgdHlwZXNcbiAqXG4gKiBAcGFyYW0gdmFsdWUgV2hlbiBpcyBhIG51bWJlciwgaXQgaXMgdHJlYXRlZCBhcyBhIHRpbWVzdGFtcCAoU3VwcG9ydCBzZWNvbmRzIGFuZCBtaWxsaXNlY29uZHMgdGltZXN0YW1wKS5cbiAqIEBwYXJhbSBmb3JtYXRTdHJpbmcgUGxlYXNlIHJlZmVyIHRvIFtkYXRlLWZuZCBmb3JtYXRdKGh0dHBzOi8vZGF0ZS1mbnMub3JnL3YyLjMwLjAvZG9jcy9mb3JtYXQpIGZvciBzdHJpbmcgZm9ybWF0XG4gKiBAcGFyYW0gZGF0ZUxvY2FsZSBSZWNvbW1lbmRlZCB0byBiZSBjb25zaXN0ZW50IHdpdGggTkctWk9SUk8gYnkgdXNpbmcgYGluamVjdChOWl9EQVRFX0xPQ0FMRSlgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREYXRlKHZhbHVlOiBEYXRlIHwgc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXRTdHJpbmc6IHN0cmluZywgZGF0ZUxvY2FsZT86IERhdGVMb2NhbGUpOiBzdHJpbmcge1xuICB2YWx1ZSA9IHRvRGF0ZSh2YWx1ZSk7XG4gIGlmIChpc05hTih2YWx1ZSBhcyBOelNhZmVBbnkpKSByZXR1cm4gJyc7XG5cbiAgY29uc3QgbGFuZ09wdCA9IHsgbG9jYWxlOiBkYXRlTG9jYWxlIH07XG4gIHJldHVybiBmb3JtYXRTdHJpbmcgPT09ICdmbicgPyBmb3JtYXREaXN0YW5jZVRvTm93KHZhbHVlLCBsYW5nT3B0KSA6IGZvcm1hdCh2YWx1ZSwgZm9ybWF0U3RyaW5nLCBsYW5nT3B0KTtcbn1cbiJdfQ==