import { addDays, endOfDay, endOfMonth, endOfWeek, endOfYear, parse, parseISO, startOfDay, startOfMonth, startOfWeek, startOfYear, subMonths, subWeeks, subYears, format, formatDistanceToNow } from 'date-fns';
/**
 * Get the time range, return `[ Date, Date]` for the start and end dates
 *
 * 获取时间范围
 *
 * @param type 类型，带 `-` 表示过去一个时间，若指定 `number` 表示天数
 * @param time 开始时间
 * @param ignoreMaxTime 忽略追加结束日期的最大时间值
 */
export function getTimeDistance(type, time, options) {
    time = time
        ? typeof time === 'string'
            ? parse(time, 'yyyy-MM-dd HH:mm:ss', new Date())
            : new Date(time)
        : new Date();
    const opt = { weekStartsOn: 1 };
    let res;
    switch (type) {
        case 'today':
            res = [time, time];
            break;
        case '-today':
            res = [addDays(time, -1), time];
            break;
        case 'yesterday':
            res = [addDays(time, -1), addDays(time, -1)];
            break;
        case 'week':
            res = [startOfWeek(time, opt), endOfWeek(time, opt)];
            break;
        case '-week':
            res = [startOfWeek(subWeeks(time, 1), opt), endOfWeek(subWeeks(time, 1), opt)];
            break;
        case 'month':
            res = [startOfMonth(time), endOfMonth(time)];
            break;
        case '-month':
            res = [startOfMonth(subMonths(time, 1)), endOfMonth(subMonths(time, 1))];
            break;
        case 'year':
            res = [startOfYear(time), endOfYear(time)];
            break;
        case '-year':
            res = [startOfYear(subYears(time, 1)), endOfYear(subYears(time, 1))];
            break;
        default:
            res = type > 0 ? [time, addDays(time, type)] : [addDays(time, type), time];
            break;
    }
    return options?.ignoreMaxTime ? res : fixEndTimeOfRange(res);
}
/**
 * fix time is the most, big value
 */
export function fixEndTimeOfRange(dates) {
    return [startOfDay(dates[0]), endOfDay(dates[1])];
}
/**
 * Convert to `Date` format
 *
 * @param value When is a number, it's treated as a timestamp; If it's seconds, you need to provide the `options.timestampSecond` parameter.
 */
export function toDate(value, options) {
    const { formatString, defaultValue, timestampSecond } = {
        formatString: 'yyyy-MM-dd HH:mm:ss',
        defaultValue: new Date(NaN),
        timestampSecond: false,
        ...(typeof options === 'string' ? { formatString: options } : options)
    };
    if (value == null) {
        return defaultValue;
    }
    if (value instanceof Date) {
        return value;
    }
    if (typeof value === 'number' || (typeof value === 'string' && /^[0-9]+$/.test(value))) {
        const valueNumber = +value;
        return new Date(timestampSecond ? valueNumber * 1000 : valueNumber);
    }
    let tryDate = parseISO(value);
    if (isNaN(tryDate)) {
        tryDate = parse(value, formatString, new Date());
    }
    return isNaN(tryDate) ? defaultValue : tryDate;
}
/**
 * Format date, supports `Date, number, string` types
 *
 * @param value When is a number, it is treated as a timestamp (Support seconds and milliseconds timestamp).
 * @param formatString Please refer to [date-fnd format](https://date-fns.org/v2.30.0/docs/format) for string format
 * @param dateLocale Recommended to be consistent with NG-ZORRO by using `inject(NZ_DATE_LOCALE)`
 */
export function formatDate(value, formatString, options) {
    value = toDate(value);
    if (isNaN(value))
        return '';
    const langOpt = { locale: options?.locale };
    return formatString === 'fn'
        ? formatDistanceToNow(value, langOpt)
        : (options?.customFormat ?? format)(value, formatString, langOpt);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3V0aWwvZGF0ZS10aW1lL3RpbWUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLE9BQU8sRUFDUCxRQUFRLEVBQ1IsVUFBVSxFQUNWLFNBQVMsRUFDVCxTQUFTLEVBQ1QsS0FBSyxFQUNMLFFBQVEsRUFDUixVQUFVLEVBQ1YsWUFBWSxFQUNaLFdBQVcsRUFDWCxXQUFXLEVBQ1gsU0FBUyxFQUNULFFBQVEsRUFDUixRQUFRLEVBQ1IsTUFBTSxFQUNOLG1CQUFtQixFQUNwQixNQUFNLFVBQVUsQ0FBQztBQU1sQjs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQzdCLElBQTBHLEVBQzFHLElBQTZCLEVBQzdCLE9BQXFDO0lBRXJDLElBQUksR0FBRyxJQUFJO1FBQ1QsQ0FBQyxDQUFDLE9BQU8sSUFBSSxLQUFLLFFBQVE7WUFDeEIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUUsSUFBSSxJQUFJLEVBQUUsQ0FBQztZQUNoRCxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ2xCLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDO0lBQ2YsTUFBTSxHQUFHLEdBQXdCLEVBQUUsWUFBWSxFQUFFLENBQUMsRUFBRSxDQUFDO0lBRXJELElBQUksR0FBaUIsQ0FBQztJQUN0QixRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2IsS0FBSyxPQUFPO1lBQ1YsR0FBRyxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ25CLE1BQU07UUFDUixLQUFLLFFBQVE7WUFDWCxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDaEMsTUFBTTtRQUNSLEtBQUssV0FBVztZQUNkLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNO1FBQ1IsS0FBSyxNQUFNO1lBQ1QsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTTtRQUNSLEtBQUssT0FBTztZQUNWLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDL0UsTUFBTTtRQUNSLEtBQUssT0FBTztZQUNWLEdBQUcsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM3QyxNQUFNO1FBQ1IsS0FBSyxRQUFRO1lBQ1gsR0FBRyxHQUFHLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDekUsTUFBTTtRQUNSLEtBQUssTUFBTTtZQUNULEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNO1FBQ1IsS0FBSyxPQUFPO1lBQ1YsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckUsTUFBTTtRQUNS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WyJpbXBvcnQge1xuICBhZGREYXlzLFxuICBlbmRPZkRheSxcbiAgZW5kT2ZNb250aCxcbiAgZW5kT2ZXZWVrLFxuICBlbmRPZlllYXIsXG4gIHBhcnNlLFxuICBwYXJzZUlTTyxcbiAgc3RhcnRPZkRheSxcbiAgc3RhcnRPZk1vbnRoLFxuICBzdGFydE9mV2VlayxcbiAgc3RhcnRPZlllYXIsXG4gIHN1Yk1vbnRocyxcbiAgc3ViV2Vla3MsXG4gIHN1YlllYXJzLFxuICBmb3JtYXQsXG4gIGZvcm1hdERpc3RhbmNlVG9Ob3dcbn0gZnJvbSAnZGF0ZS1mbnMnO1xuXG5pbXBvcnQgdHlwZSB7IFl1bnphaVRoZW1lUGlwZURhdGVGb3JtYXRDdXN0b20gfSBmcm9tICdAeWVsb24vdXRpbC9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgRGF0ZUxvY2FsZSB9IGZyb20gJ25nLXpvcnJvLWFudGQvaTE4bic7XG5cbi8qKlxuICogR2V0IHRoZSB0aW1lIHJhbmdlLCByZXR1cm4gYFsgRGF0ZSwgRGF0ZV1gIGZvciB0aGUgc3RhcnQgYW5kIGVuZCBkYXRlc1xuICpcbiAqIOiOt+WPluaXtumXtOiMg+WbtFxuICpcbiAqIEBwYXJhbSB0eXBlIOexu+Wei++8jOW4piBgLWAg6KGo56S66L+H5Y675LiA5Liq5pe26Ze077yM6Iul5oyH5a6aIGBudW1iZXJgIOihqOekuuWkqeaVsFxuICogQHBhcmFtIHRpbWUg5byA5aeL5pe26Ze0XG4gKiBAcGFyYW0gaWdub3JlTWF4VGltZSDlv73nlaXov73liqDnu5PmnZ/ml6XmnJ/nmoTmnIDlpKfml7bpl7TlgLxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFRpbWVEaXN0YW5jZShcbiAgdHlwZTogJ3RvZGF5JyB8ICctdG9kYXknIHwgJ3llc3RlcmRheScgfCAnd2VlaycgfCAnLXdlZWsnIHwgJ21vbnRoJyB8ICctbW9udGgnIHwgJ3llYXInIHwgJy15ZWFyJyB8IG51bWJlcixcbiAgdGltZT86IERhdGUgfCBzdHJpbmcgfCBudW1iZXIsXG4gIG9wdGlvbnM/OiB7IGlnbm9yZU1heFRpbWU/OiBib29sZWFuIH1cbik6IFtEYXRlLCBEYXRlXSB7XG4gIHRpbWUgPSB0aW1lXG4gICAgPyB0eXBlb2YgdGltZSA9PT0gJ3N0cmluZydcbiAgICAgID8gcGFyc2UodGltZSwgJ3l5eXktTU0tZGQgSEg6bW06c3MnLCBuZXcgRGF0ZSgpKVxuICAgICAgOiBuZXcgRGF0ZSh0aW1lKVxuICAgIDogbmV3IERhdGUoKTtcbiAgY29uc3Qgb3B0OiB7IHdlZWtTdGFydHNPbjogMSB9ID0geyB3ZWVrU3RhcnRzT246IDEgfTtcblxuICBsZXQgcmVzOiBbRGF0ZSwgRGF0ZV07XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3RvZGF5JzpcbiAgICAgIHJlcyA9IFt0aW1lLCB0aW1lXTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJy10b2RheSc6XG4gICAgICByZXMgPSBbYWRkRGF5cyh0aW1lLCAtMSksIHRpbWVdO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAneWVzdGVyZGF5JzpcbiAgICAgIHJlcyA9IFthZGREYXlzKHRpbWUsIC0xKSwgYWRkRGF5cyh0aW1lLCAtMSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnd2Vlayc6XG4gICAgICByZXMgPSBbc3RhcnRPZldlZWsodGltZSwgb3B0KSwgZW5kT2ZXZWVrKHRpbWUsIG9wdCldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnLXdlZWsnOlxuICAgICAgcmVzID0gW3N0YXJ0T2ZXZWVrKHN1YldlZWtzKHRpbWUsIDEpLCBvcHQpLCBlbmRPZldlZWsoc3ViV2Vla3ModGltZSwgMSksIG9wdCldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnbW9udGgnOlxuICAgICAgcmVzID0gW3N0YXJ0T2ZNb250aCh0aW1lKSwgZW5kT2ZNb250aCh0aW1lKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICctbW9udGgnOlxuICAgICAgcmVzID0gW3N0YXJ0T2ZNb250aChzdWJNb250aHModGltZSwgMSkpLCBlbmRPZk1vbnRoKHN1Yk1vbnRocyh0aW1lLCAxKSldO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAneWVhcic6XG4gICAgICByZXMgPSBbc3RhcnRPZlllYXIodGltZSksIGVuZE9mWWVhcih0aW1lKV07XG4gICAgICBicmVhaztcbiAgICBjYXNlICcteWVhcic6XG4gICAgICByZXMgPSBbc3RhcnRPZlllYXIoc3ViWWVhcnModGltZSwgMSkpLCBlbmRPZlllYXIoc3ViWWVhcnModGltZSwgMSkpXTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXMgPSB0eXBlID4gMCA/IFt0aW1lLCBhZGREYXlzKHRpbWUsIHR5cGUpXSA6IFthZGREYXlzKHRpbWUsIHR5cGUpLCB0aW1lXTtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiBvcHRpb25zPy5pZ25vcmVNYXhUaW1lID8gcmVzIDogZml4RW5kVGltZU9mUmFuZ2UocmVzKTtcbn1cblxuLyoqXG4gKiBmaXggdGltZSBpcyB0aGUgbW9zdCwgYmlnIHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaXhFbmRUaW1lT2ZSYW5nZShkYXRlczogW0RhdGUsIERhdGVdKTogW0RhdGUsIERhdGVdIHtcbiAgcmV0dXJuIFtzdGFydE9mRGF5KGRhdGVzWzBdKSwgZW5kT2ZEYXkoZGF0ZXNbMV0pXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb0RhdGVPcHRpb25zIHtcbiAgLyoqIElmIHBhcnNpbmcgZmFpbHMgdHJ5IHRvIHBhcnNlIHRoZSBkYXRlIGJ5IHByZXNzaW5nIGBmb3JtYXRTdHJpbmdgICovXG4gIGZvcm1hdFN0cmluZz86IHN0cmluZztcbiAgLyoqIElmIHBhcnNpbmcgZmFpbHMgcmV0dXJuZWQgZGVmYXVsdCB2YWx1ZSwgZGVmYXVsdDogYG5ldyBEYXRlKE5hTilgICovXG4gIGRlZmF1bHRWYWx1ZT86IE56U2FmZUFueTtcbiAgdGltZXN0YW1wU2Vjb25kPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IHRvIGBEYXRlYCBmb3JtYXRcbiAqXG4gKiBAcGFyYW0gdmFsdWUgV2hlbiBpcyBhIG51bWJlciwgaXQncyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wOyBJZiBpdCdzIHNlY29uZHMsIHlvdSBuZWVkIHRvIHByb3ZpZGUgdGhlIGBvcHRpb25zLnRpbWVzdGFtcFNlY29uZGAgcGFyYW1ldGVyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9EYXRlKHZhbHVlPzogRGF0ZSB8IHN0cmluZyB8IG51bWJlciB8IG51bGwsIG9wdGlvbnM/OiBzdHJpbmcgfCBUb0RhdGVPcHRpb25zKTogRGF0ZSB7XG4gIGNvbnN0IHsgZm9ybWF0U3RyaW5nLCBkZWZhdWx0VmFsdWUsIHRpbWVzdGFtcFNlY29uZCB9ID0ge1xuICAgIGZvcm1hdFN0cmluZzogJ3l5eXktTU0tZGQgSEg6bW06c3MnLFxuICAgIGRlZmF1bHRWYWx1ZTogbmV3IERhdGUoTmFOKSxcbiAgICB0aW1lc3RhbXBTZWNvbmQ6IGZhbHNlLFxuICAgIC4uLih0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycgPyB7IGZvcm1hdFN0cmluZzogb3B0aW9ucyB9IDogb3B0aW9ucylcbiAgfTtcbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgL15bMC05XSskLy50ZXN0KHZhbHVlKSkpIHtcbiAgICBjb25zdCB2YWx1ZU51bWJlciA9ICt2YWx1ZTtcbiAgICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wU2Vjb25kID8gdmFsdWVOdW1iZXIgKiAxMDAwIDogdmFsdWVOdW1iZXIpO1xuICB9XG4gIGxldCB0cnlEYXRlID0gcGFyc2VJU08odmFsdWUpO1xuICBpZiAoaXNOYU4odHJ5RGF0ZSBhcyBOelNhZmVBbnkpKSB7XG4gICAgdHJ5RGF0ZSA9IHBhcnNlKHZhbHVlLCBmb3JtYXRTdHJpbmchLCBuZXcgRGF0ZSgpKTtcbiAgfVxuXG4gIHJldHVybiBpc05hTih0cnlEYXRlIGFzIE56U2FmZUFueSkgPyBkZWZhdWx0VmFsdWUgOiB0cnlEYXRlO1xufVxuXG4vKipcbiAqIEZvcm1hdCBkYXRlLCBzdXBwb3J0cyBgRGF0ZSwgbnVtYmVyLCBzdHJpbmdgIHR5cGVzXG4gKlxuICogQHBhcmFtIHZhbHVlIFdoZW4gaXMgYSBudW1iZXIsIGl0IGlzIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXAgKFN1cHBvcnQgc2Vjb25kcyBhbmQgbWlsbGlzZWNvbmRzIHRpbWVzdGFtcCkuXG4gKiBAcGFyYW0gZm9ybWF0U3RyaW5nIFBsZWFzZSByZWZlciB0byBbZGF0ZS1mbmQgZm9ybWF0XShodHRwczovL2RhdGUtZm5zLm9yZy92Mi4zMC4wL2RvY3MvZm9ybWF0KSBmb3Igc3RyaW5nIGZvcm1hdFxuICogQHBhcmFtIGRhdGVMb2NhbGUgUmVjb21tZW5kZWQgdG8gYmUgY29uc2lzdGVudCB3aXRoIE5HLVpPUlJPIGJ5IHVzaW5nIGBpbmplY3QoTlpfREFURV9MT0NBTEUpYFxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZShcbiAgdmFsdWU6IERhdGUgfCBzdHJpbmcgfCBudW1iZXIsXG4gIGZvcm1hdFN0cmluZzogc3RyaW5nLFxuICBvcHRpb25zPzogeyBsb2NhbGU/OiBEYXRlTG9jYWxlOyBjdXN0b21Gb3JtYXQ/OiBZdW56YWlUaGVtZVBpcGVEYXRlRm9ybWF0Q3VzdG9tIH1cbik6IHN0cmluZyB7XG4gIHZhbHVlID0gdG9EYXRlKHZhbHVlKTtcbiAgaWYgKGlzTmFOKHZhbHVlIGFzIE56U2FmZUFueSkpIHJldHVybiAnJztcblxuICBjb25zdCBsYW5nT3B0ID0geyBsb2NhbGU6IG9wdGlvbnM/LmxvY2FsZSB9O1xuICByZXR1cm4gZm9ybWF0U3RyaW5nID09PSAnZm4nXG4gICAgPyBmb3JtYXREaXN0YW5jZVRvTm93KHZhbHVlLCBsYW5nT3B0KVxuICAgIDogKG9wdGlvbnM/LmN1c3RvbUZvcm1hdCA/PyBmb3JtYXQpKHZhbHVlLCBmb3JtYXRTdHJpbmcsIGxhbmdPcHQpO1xufVxuIl19