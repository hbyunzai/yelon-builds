import { HttpErrorResponse, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { ALLOW_ANONYMOUS } from '../token';
import { ToLogin } from './helper';
export function isAnonymous(req, options) {
    if (req.context.get(ALLOW_ANONYMOUS))
        return true;
    if (Array.isArray(options.ignores)) {
        for (const item of options.ignores) {
            if (item.test(req.url))
                return true;
        }
    }
    const ignoreKey = options.allow_anonymous_key;
    let ignored = false;
    if (req.params.has(ignoreKey)) {
        ignored = true;
    }
    const urlArr = req.url.split('?');
    if (urlArr.length > 1) {
        const queryStringParams = new HttpParams({ fromString: urlArr[1] });
        if (queryStringParams.has(ignoreKey)) {
            ignored = true;
        }
    }
    return ignored;
}
export function throwErr(req, options) {
    ToLogin(options);
    // Interrupt Http request, so need to generate a new Observable
    return new Observable((observer) => {
        let statusText = '';
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
            statusText = `来自 @yelon/auth 的拦截，所请求URL未授权，若是登录API可加入 new HttpContext().set(ALLOW_ANONYMOUS, true) 来表示忽略校验，更多方法请参考： https://ng.yunzainfo.com/auth/getting-started#YunzaiAuthConfig\nThe interception from @yelon/auth, the requested URL is not authorized. If the login API can add new HttpContext().set(ALLOW_ANONYMOUS, true) to ignore the check, please refer to: https://ng.yunzainfo.com/auth/getting-started#YunzaiAuthConfig`;
        }
        const res = new HttpErrorResponse({
            url: req.url,
            headers: req.headers,
            status: 401,
            statusText
        });
        observer.error(res);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2F1dGgvc3JjL3Rva2VuL2Jhc2UuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFhLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQzdGLE9BQU8sRUFBRSxVQUFVLEVBQVksTUFBTSxNQUFNLENBQUM7QUFLNUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRW5DLE1BQU0sVUFBVSxXQUFXLENBQUMsR0FBeUIsRUFBRSxPQUF5QjtJQUM5RSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQztRQUFFLE9BQU8sSUFBSSxDQUFDO0lBQ2xELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNuQyxLQUFLLE1BQU0sSUFBSSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNuQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztnQkFBRSxPQUFPLElBQUksQ0FBQztRQUN0QyxDQUFDO0lBQ0gsQ0FBQztJQUNELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxtQkFBb0IsQ0FBQztJQUMvQyxJQUFJLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDcEIsSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDO1FBQzlCLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDakIsQ0FBQztJQUNELE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2xDLElBQUksTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUN0QixNQUFNLGlCQUFpQixHQUFHLElBQUksVUFBVSxDQUFDLEVBQUUsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEUsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztZQUNyQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLENBQUM7SUFDSCxDQUFDO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsR0FBeUIsRUFBRSxPQUF5QjtJQUMzRSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFakIsK0RBQStEO0lBQy9ELE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxRQUF3QyxFQUFFLEVBQUU7UUFDakUsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2xELFVBQVUsR0FBRywwWkFBMFosQ0FBQztRQUMxYSxDQUFDO1FBQ0QsTUFBTSxHQUFHLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQztZQUNoQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEdBQUc7WUFDWixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87WUFDcEIsTUFBTSxFQUFFLEdBQUc7WUFDWCxVQUFVO1NBQ1gsQ0FBQyxDQUFDO1FBQ0gsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cEV2ZW50LCBIdHRwUGFyYW1zLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IFl1bnphaUF1dGhDb25maWcgfSBmcm9tICdAeWVsb24vdXRpbC9jb25maWcnO1xuaW1wb3J0IHsgTnpTYWZlQW55IH0gZnJvbSAnbmctem9ycm8tYW50ZC9jb3JlL3R5cGVzJztcblxuaW1wb3J0IHsgQUxMT1dfQU5PTllNT1VTIH0gZnJvbSAnLi4vdG9rZW4nO1xuaW1wb3J0IHsgVG9Mb2dpbiB9IGZyb20gJy4vaGVscGVyJztcblxuZXhwb3J0IGZ1bmN0aW9uIGlzQW5vbnltb3VzKHJlcTogSHR0cFJlcXVlc3Q8dW5rbm93bj4sIG9wdGlvbnM6IFl1bnphaUF1dGhDb25maWcpOiBib29sZWFuIHtcbiAgaWYgKHJlcS5jb250ZXh0LmdldChBTExPV19BTk9OWU1PVVMpKSByZXR1cm4gdHJ1ZTtcbiAgaWYgKEFycmF5LmlzQXJyYXkob3B0aW9ucy5pZ25vcmVzKSkge1xuICAgIGZvciAoY29uc3QgaXRlbSBvZiBvcHRpb25zLmlnbm9yZXMpIHtcbiAgICAgIGlmIChpdGVtLnRlc3QocmVxLnVybCkpIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICBjb25zdCBpZ25vcmVLZXkgPSBvcHRpb25zLmFsbG93X2Fub255bW91c19rZXkhO1xuICBsZXQgaWdub3JlZCA9IGZhbHNlO1xuICBpZiAocmVxLnBhcmFtcy5oYXMoaWdub3JlS2V5KSkge1xuICAgIGlnbm9yZWQgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHVybEFyciA9IHJlcS51cmwuc3BsaXQoJz8nKTtcbiAgaWYgKHVybEFyci5sZW5ndGggPiAxKSB7XG4gICAgY29uc3QgcXVlcnlTdHJpbmdQYXJhbXMgPSBuZXcgSHR0cFBhcmFtcyh7IGZyb21TdHJpbmc6IHVybEFyclsxXSB9KTtcbiAgICBpZiAocXVlcnlTdHJpbmdQYXJhbXMuaGFzKGlnbm9yZUtleSkpIHtcbiAgICAgIGlnbm9yZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gaWdub3JlZDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRocm93RXJyKHJlcTogSHR0cFJlcXVlc3Q8dW5rbm93bj4sIG9wdGlvbnM6IFl1bnphaUF1dGhDb25maWcpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDx1bmtub3duPj4ge1xuICBUb0xvZ2luKG9wdGlvbnMpO1xuXG4gIC8vIEludGVycnVwdCBIdHRwIHJlcXVlc3QsIHNvIG5lZWQgdG8gZ2VuZXJhdGUgYSBuZXcgT2JzZXJ2YWJsZVxuICByZXR1cm4gbmV3IE9ic2VydmFibGUoKG9ic2VydmVyOiBPYnNlcnZlcjxIdHRwRXZlbnQ8TnpTYWZlQW55Pj4pID0+IHtcbiAgICBsZXQgc3RhdHVzVGV4dCA9ICcnO1xuICAgIGlmICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpIHtcbiAgICAgIHN0YXR1c1RleHQgPSBg5p2l6IeqIEB5ZWxvbi9hdXRoIOeahOaLpuaIqu+8jOaJgOivt+axglVSTOacquaOiOadg++8jOiLpeaYr+eZu+W9lUFQSeWPr+WKoOWFpSBuZXcgSHR0cENvbnRleHQoKS5zZXQoQUxMT1dfQU5PTllNT1VTLCB0cnVlKSDmnaXooajnpLrlv73nlaXmoKHpqozvvIzmm7TlpJrmlrnms5Xor7flj4LogIPvvJogaHR0cHM6Ly9uZy55dW56YWluZm8uY29tL2F1dGgvZ2V0dGluZy1zdGFydGVkI1l1bnphaUF1dGhDb25maWdcXG5UaGUgaW50ZXJjZXB0aW9uIGZyb20gQHllbG9uL2F1dGgsIHRoZSByZXF1ZXN0ZWQgVVJMIGlzIG5vdCBhdXRob3JpemVkLiBJZiB0aGUgbG9naW4gQVBJIGNhbiBhZGQgbmV3IEh0dHBDb250ZXh0KCkuc2V0KEFMTE9XX0FOT05ZTU9VUywgdHJ1ZSkgdG8gaWdub3JlIHRoZSBjaGVjaywgcGxlYXNlIHJlZmVyIHRvOiBodHRwczovL25nLnl1bnphaW5mby5jb20vYXV0aC9nZXR0aW5nLXN0YXJ0ZWQjWXVuemFpQXV0aENvbmZpZ2A7XG4gICAgfVxuICAgIGNvbnN0IHJlcyA9IG5ldyBIdHRwRXJyb3JSZXNwb25zZSh7XG4gICAgICB1cmw6IHJlcS51cmwsXG4gICAgICBoZWFkZXJzOiByZXEuaGVhZGVycyxcbiAgICAgIHN0YXR1czogNDAxLFxuICAgICAgc3RhdHVzVGV4dFxuICAgIH0pO1xuICAgIG9ic2VydmVyLmVycm9yKHJlcyk7XG4gIH0pO1xufVxuIl19