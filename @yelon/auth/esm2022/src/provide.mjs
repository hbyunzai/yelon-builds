import { makeEnvironmentProviders } from '@angular/core';
import { CookieService } from '@yelon/util/browser';
import { CookieStorageStore, YA_STORE_TOKEN, LocalStorageStore, MemoryStore, SessionStorageStore } from './store';
export var AuthFeatureKind;
(function (AuthFeatureKind) {
    AuthFeatureKind[AuthFeatureKind["Store"] = 0] = "Store";
})(AuthFeatureKind || (AuthFeatureKind = {}));
function makeAuthFeature(kind, providers) {
    return {
        ɵkind: kind,
        ɵproviders: providers
    };
}
/**
 * Configures authentication process service to be available for injection.
 *
 * @see {@link withCookie}
 * @see {@link withLocalStorage}
 * @see {@link withSessionStorage}
 */
export function provideAuth(store) {
    return makeEnvironmentProviders([(store ?? withLocalStorage()).ɵproviders]);
}
/** `cookie` storage */
export function withCookie() {
    return makeAuthFeature(AuthFeatureKind.Store, [
        { provide: YA_STORE_TOKEN, useClass: CookieStorageStore, deps: [CookieService] }
    ]);
}
/** `localStorage` storage, **not lost after closing the browser**. */
export function withLocalStorage() {
    return makeAuthFeature(AuthFeatureKind.Store, [{ provide: YA_STORE_TOKEN, useClass: LocalStorageStore }]);
}
/** `sessionStorage` storage, **lost after closing the browser**. */
export function withSessionStorage() {
    return makeAuthFeature(AuthFeatureKind.Store, [{ provide: YA_STORE_TOKEN, useClass: SessionStorageStore }]);
}
/** Memory storage, **lost after closing the browser tab**. */
export function withMemoryStorage() {
    return makeAuthFeature(AuthFeatureKind.Store, [{ provide: YA_STORE_TOKEN, useClass: MemoryStore }]);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2F1dGgvc3JjL3Byb3ZpZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFrQyx3QkFBd0IsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUV6RixPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFbEgsTUFBTSxDQUFOLElBQVksZUFFWDtBQUZELFdBQVksZUFBZTtJQUN6Qix1REFBSyxDQUFBO0FBQ1AsQ0FBQyxFQUZXLGVBQWUsS0FBZixlQUFlLFFBRTFCO0FBT0QsU0FBUyxlQUFlLENBQWdDLElBQVcsRUFBRSxTQUFxQjtJQUN4RixPQUFPO1FBQ0wsS0FBSyxFQUFFLElBQUk7UUFDWCxVQUFVLEVBQUUsU0FBUztLQUN0QixDQUFDO0FBQ0osQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsS0FBMEM7SUFDcEUsT0FBTyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0FBQzlFLENBQUM7QUFFRCx1QkFBdUI7QUFDdkIsTUFBTSxVQUFVLFVBQVU7SUFDeEIsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRTtRQUM1QyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFFLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO0tBQ2pGLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxzRUFBc0U7QUFDdEUsTUFBTSxVQUFVLGdCQUFnQjtJQUM5QixPQUFPLGVBQWUsQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxpQkFBaUIsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUM1RyxDQUFDO0FBRUQsb0VBQW9FO0FBQ3BFLE1BQU0sVUFBVSxrQkFBa0I7SUFDaEMsT0FBTyxlQUFlLENBQUMsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUcsQ0FBQztBQUVELDhEQUE4RDtBQUM5RCxNQUFNLFVBQVUsaUJBQWlCO0lBQy9CLE9BQU8sZUFBZSxDQUFDLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE9BQU8sRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW52aXJvbm1lbnRQcm92aWRlcnMsIFByb3ZpZGVyLCBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29va2llU2VydmljZSB9IGZyb20gJ0B5ZWxvbi91dGlsL2Jyb3dzZXInO1xuXG5pbXBvcnQgeyBDb29raWVTdG9yYWdlU3RvcmUsIFlBX1NUT1JFX1RPS0VOLCBMb2NhbFN0b3JhZ2VTdG9yZSwgTWVtb3J5U3RvcmUsIFNlc3Npb25TdG9yYWdlU3RvcmUgfSBmcm9tICcuL3N0b3JlJztcblxuZXhwb3J0IGVudW0gQXV0aEZlYXR1cmVLaW5kIHtcbiAgU3RvcmVcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBdXRoRmVhdHVyZTxLaW5kVCBleHRlbmRzIEF1dGhGZWF0dXJlS2luZD4ge1xuICDJtWtpbmQ6IEtpbmRUO1xuICDJtXByb3ZpZGVyczogUHJvdmlkZXJbXTtcbn1cblxuZnVuY3Rpb24gbWFrZUF1dGhGZWF0dXJlPEtpbmRUIGV4dGVuZHMgQXV0aEZlYXR1cmVLaW5kPihraW5kOiBLaW5kVCwgcHJvdmlkZXJzOiBQcm92aWRlcltdKTogQXV0aEZlYXR1cmU8S2luZFQ+IHtcbiAgcmV0dXJuIHtcbiAgICDJtWtpbmQ6IGtpbmQsXG4gICAgybVwcm92aWRlcnM6IHByb3ZpZGVyc1xuICB9O1xufVxuXG4vKipcbiAqIENvbmZpZ3VyZXMgYXV0aGVudGljYXRpb24gcHJvY2VzcyBzZXJ2aWNlIHRvIGJlIGF2YWlsYWJsZSBmb3IgaW5qZWN0aW9uLlxuICpcbiAqIEBzZWUge0BsaW5rIHdpdGhDb29raWV9XG4gKiBAc2VlIHtAbGluayB3aXRoTG9jYWxTdG9yYWdlfVxuICogQHNlZSB7QGxpbmsgd2l0aFNlc3Npb25TdG9yYWdlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUF1dGgoc3RvcmU/OiBBdXRoRmVhdHVyZTxBdXRoRmVhdHVyZUtpbmQuU3RvcmU+KTogRW52aXJvbm1lbnRQcm92aWRlcnMge1xuICByZXR1cm4gbWFrZUVudmlyb25tZW50UHJvdmlkZXJzKFsoc3RvcmUgPz8gd2l0aExvY2FsU3RvcmFnZSgpKS7JtXByb3ZpZGVyc10pO1xufVxuXG4vKiogYGNvb2tpZWAgc3RvcmFnZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhDb29raWUoKTogQXV0aEZlYXR1cmU8QXV0aEZlYXR1cmVLaW5kLlN0b3JlPiB7XG4gIHJldHVybiBtYWtlQXV0aEZlYXR1cmUoQXV0aEZlYXR1cmVLaW5kLlN0b3JlLCBbXG4gICAgeyBwcm92aWRlOiBZQV9TVE9SRV9UT0tFTiwgdXNlQ2xhc3M6IENvb2tpZVN0b3JhZ2VTdG9yZSwgZGVwczogW0Nvb2tpZVNlcnZpY2VdIH1cbiAgXSk7XG59XG5cbi8qKiBgbG9jYWxTdG9yYWdlYCBzdG9yYWdlLCAqKm5vdCBsb3N0IGFmdGVyIGNsb3NpbmcgdGhlIGJyb3dzZXIqKi4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoTG9jYWxTdG9yYWdlKCk6IEF1dGhGZWF0dXJlPEF1dGhGZWF0dXJlS2luZC5TdG9yZT4ge1xuICByZXR1cm4gbWFrZUF1dGhGZWF0dXJlKEF1dGhGZWF0dXJlS2luZC5TdG9yZSwgW3sgcHJvdmlkZTogWUFfU1RPUkVfVE9LRU4sIHVzZUNsYXNzOiBMb2NhbFN0b3JhZ2VTdG9yZSB9XSk7XG59XG5cbi8qKiBgc2Vzc2lvblN0b3JhZ2VgIHN0b3JhZ2UsICoqbG9zdCBhZnRlciBjbG9zaW5nIHRoZSBicm93c2VyKiouICovXG5leHBvcnQgZnVuY3Rpb24gd2l0aFNlc3Npb25TdG9yYWdlKCk6IEF1dGhGZWF0dXJlPEF1dGhGZWF0dXJlS2luZC5TdG9yZT4ge1xuICByZXR1cm4gbWFrZUF1dGhGZWF0dXJlKEF1dGhGZWF0dXJlS2luZC5TdG9yZSwgW3sgcHJvdmlkZTogWUFfU1RPUkVfVE9LRU4sIHVzZUNsYXNzOiBTZXNzaW9uU3RvcmFnZVN0b3JlIH1dKTtcbn1cblxuLyoqIE1lbW9yeSBzdG9yYWdlLCAqKmxvc3QgYWZ0ZXIgY2xvc2luZyB0aGUgYnJvd3NlciB0YWIqKi4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3aXRoTWVtb3J5U3RvcmFnZSgpOiBBdXRoRmVhdHVyZTxBdXRoRmVhdHVyZUtpbmQuU3RvcmU+IHtcbiAgcmV0dXJuIG1ha2VBdXRoRmVhdHVyZShBdXRoRmVhdHVyZUtpbmQuU3RvcmUsIFt7IHByb3ZpZGU6IFlBX1NUT1JFX1RPS0VOLCB1c2VDbGFzczogTWVtb3J5U3RvcmUgfV0pO1xufVxuIl19