import { discardPeriodicTasks, flush, TestBed, tick } from '@angular/core/testing';
export const PageG2DataCount = 2;
export const PageG2Height = 100;
export class PageG2 {
    constructor(fixture = null) {
        this.fixture = fixture;
    }
    get dl() {
        return this.fixture.debugElement;
    }
    get context() {
        return this.fixture.componentInstance;
    }
    get comp() {
        return this.context['comp'];
    }
    get chart() {
        return this.comp.chart;
    }
    genModule(module, comp) {
        TestBed.configureTestingModule({
            imports: [module],
            declarations: [comp]
        });
        return this;
    }
    genComp(comp, dc = false) {
        this.fixture = TestBed.createComponent(comp);
        if (dc) {
            this.dcFirst();
        }
        return this;
    }
    makeModule(module, comp, options = { dc: true }) {
        this.genModule(module, comp).genComp(comp, options.dc);
        return this;
    }
    dcFirst() {
        this.dc();
        flush();
        discardPeriodicTasks();
        // FIX: `Error during cleanup of component`
        if (this.comp && typeof this.comp.chart !== 'undefined') {
            spyOn(this.comp.chart, 'destroy');
        }
        return this;
    }
    dc() {
        this.fixture.changeDetectorRef.markForCheck();
        this.fixture.detectChanges();
        return this;
    }
    end() {
        // The 201 value is delay value
        tick(201);
        flush();
        discardPeriodicTasks();
        return this;
    }
    destroy() {
        this.comp.ngOnDestroy();
    }
    newData(data) {
        this.context['data'] = data;
        this.dc();
        return this;
    }
    getEls(cls) {
        return this.dl.nativeElement.querySelectorAll(cls);
    }
    getEl(cls) {
        return this.dl.nativeElement.querySelector(cls);
    }
    getController(type) {
        return this.chart.getController(type);
    }
    isCanvas(stauts = true) {
        this.isExists('canvas', stauts);
        return this;
    }
    isText(cls, value) {
        const el = this.getEl(cls);
        expect(el ? el.textContent.trim() : '').toBe(value);
        return this;
    }
    isExists(cls, stauts = true) {
        expect(this.getEl(cls) != null).toBe(stauts);
        return this;
    }
    checkOptions(key, value) {
        expect(this.chart[key]).toBe(value);
        return this;
    }
    checkAttrOptions(type, key, value) {
        const x = this.chart[type][0].attributeOption[key];
        expect(x.field).toBe(value);
        return this;
    }
    isXScalesCount(num) {
        const x = this.chart.getXScale();
        expect(x.values.length).toBe(num);
        return this;
    }
    isYScalesCount(num) {
        const y = this.chart.getYScales();
        expect(y.length).toBe(1);
        expect(y[0].values.length).toBe(num);
        return this;
    }
    isDataCount(type, num) {
        const results = this.chart[type];
        expect(results.length).toBeGreaterThan(0);
        expect(results[0].data.length).toBe(num);
        return this;
    }
    get firstDataPoint() {
        return this.chart.getXY(this.context['data'][0]);
    }
    checkTooltip(_includeText, point) {
        if (!point) {
            point = this.firstDataPoint;
        }
        this.chart.showTooltip(point);
        expect(this.chart.getController('tooltip') != null).toBe(true);
        return this;
    }
    checkClickItem() {
        const point = this.firstDataPoint;
        const clientPoint = this.chart.canvas.getClientByPoint(point.x, point.y);
        const event = new MouseEvent('click', {
            clientX: clientPoint.x,
            clientY: clientPoint.y
        });
        this.chart.canvas.get('el').dispatchEvent(event);
        return this;
    }
}
export function checkDelay(module, comp, page = null) {
    if (page == null) {
        page = new PageG2().makeModule(module, comp, { dc: false });
    }
    const context = page.context;
    if (typeof context.delay === 'undefined') {
        console.warn(`You muse be dinfed "delay" property in test component`);
        return;
    }
    context.delay = 100;
    page.dc();
    page.comp.ngOnDestroy();
    expect(page.chart == null).toBe(true);
    tick(201);
    discardPeriodicTasks();
}
//# sourceMappingURL=data:application/json;base64,