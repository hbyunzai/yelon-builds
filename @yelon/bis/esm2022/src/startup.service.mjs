import { HttpClient } from '@angular/common/http';
import { APP_INITIALIZER, inject, Injectable } from '@angular/core';
import { catchError, combineLatest, EMPTY, map, mergeMap, of } from 'rxjs';
import { ACLService } from '@yelon/acl';
import { YA_SERVICE_TOKEN } from '@yelon/auth';
import { mergeBisConfig } from '@yelon/bis/config';
import { MenuService, SettingsService, TitleService, YUNZAI_I18N_TOKEN } from '@yelon/theme';
import { deepCopy, useLocalStorageCurrent, useLocalStorageDefaultRoute, useLocalStorageHeader, useLocalStorageProjectInfo, useLocalStorageTenant, useLocalStorageUser, WINDOW, YunzaiConfigService } from '@yelon/util';
import * as i0 from "@angular/core";
export function provideYunzaiStartup() {
    return [
        YunzaiStartupService,
        {
            provide: APP_INITIALIZER,
            useFactory: (startupService) => () => startupService.load(),
            deps: [YunzaiStartupService],
            multi: true
        }
    ];
}
export class YunzaiStartupService {
    constructor() {
        this.config = mergeBisConfig(inject(YunzaiConfigService));
        this.menuService = inject(MenuService);
        this.aclService = inject(ACLService);
        this.titleService = inject(TitleService);
        this.tokenService = inject(YA_SERVICE_TOKEN);
        this.httpClient = inject(HttpClient);
        this.settingService = inject(SettingsService);
        this.i18n = inject(YUNZAI_I18N_TOKEN);
        this.win = inject(WINDOW);
        this.configService = inject(YunzaiConfigService);
    }
    load(param) {
        let defaultLang = this.settingService.layout.lang || this.i18n.defaultLang;
        const [setTenant] = useLocalStorageTenant();
        const [setUser, getUser] = useLocalStorageUser();
        const [setHeader] = useLocalStorageHeader();
        const [setProject] = useLocalStorageProjectInfo();
        const [setDefaultRoute] = useLocalStorageDefaultRoute();
        const [setCurrent] = useLocalStorageCurrent();
        return this.token(param).pipe(mergeMap((token) => {
            if (token === false) {
                return this.i18n.loadLocaleData(defaultLang).pipe(mergeMap(() => EMPTY));
            }
            this.configService.set('auth', {
                token_send_key: 'Authorization',
                token_send_template: `${token.token_type} \${access_token}`,
                token_send_place: 'header'
            });
            this.tokenService.set(token);
            return of(void 0);
        }), mergeMap(() => {
            return combineLatest([
                this.httpClient.get(`/auth/user`),
                this.httpClient.get(`/auth/allheader/v2`),
                this.httpClient.get(`/app-manager/project/info`)
            ]).pipe(map(([user, header, project]) => {
                setUser(user.principal);
                setTenant(user.tenantId);
                setHeader(header.data);
                setProject(project.data);
                return void 0;
            }));
        }), mergeMap(() => {
            return this.i18n.loadLangData(defaultLang).pipe(map((langData) => {
                this.i18n.use(defaultLang, langData);
                return void 0;
            }));
        }), mergeMap(() => {
            const yunzaiUser = getUser();
            const yunzaiMenus = deepCopy(yunzaiUser.menu).filter(m => m.systemCode && m.systemCode === this.config.systemCode);
            const currentMenu = yunzaiMenus.pop();
            if (currentMenu) {
                this.settingService.setApp({ name: currentMenu.text, description: currentMenu.intro });
                this.settingService.setUser({
                    name: yunzaiUser.realname,
                    avatar: `${this.config.baseUrl}/filecenter/file/${yunzaiUser.avatarId}` || '',
                    email: yunzaiUser.email
                });
                this.titleService.default = currentMenu && currentMenu.text ? currentMenu.text : 'default application name';
                this.titleService.setTitle(currentMenu && currentMenu.text ? currentMenu.text : 'no title');
                const abilities = [];
                generateAbility([currentMenu], abilities, '');
                this.aclService.attachRole(yunzaiUser?.roles
                    .map((role) => {
                    return role.roleValue;
                })
                    .filter((a) => !!a) || []);
                this.aclService.attachAbility(abilities);
                this.menuService.add([currentMenu]);
                setCurrent({
                    name: currentMenu.text,
                    intro: currentMenu.intro || '',
                    icon: currentMenu.appIconUrl || './assets/tmp/img/avatar.jpg'
                });
                const attributes = currentMenu.attribute;
                if (attributes) {
                    const attr = JSON.parse(attributes);
                    if (attr && attr.defaultRoute) {
                        setDefaultRoute(attr.defaultRoute);
                    }
                    else {
                        setDefaultRoute('/displayIndex');
                    }
                }
                else {
                    setDefaultRoute('/displayIndex');
                }
            }
            return of(void 0);
        }), catchError((error) => {
            console.error('Error occurred:', error);
            return of(void 0);
        }));
    }
    token(param) {
        const auto = this.configService.get('auth')?.auto;
        const force = param?.force || undefined;
        if (this.config.loginForm) {
            if (this.tokenService.get()?.access_token || force || auto) {
                return this.httpClient.post(`/auth/oauth/token?_allow_anonymous=true`, this.config.loginForm).pipe(map((response) => {
                    return response;
                }));
            }
            return of(false);
        }
        else {
            const uri = encodeURIComponent(this.win.location.href);
            return this.httpClient
                .get(`/cas-proxy/app/validate_full?callback=${uri}&_allow_anonymous=true&timestamp=${new Date().getTime()}`)
                .pipe(map((response) => {
                switch (response.errcode) {
                    case 2000:
                        return response.data;
                    case 2001:
                        if (!force && !auto) {
                            return false;
                        }
                        this.win.location.href = response.msg;
                        throw Error("Cookie Error: Can't find Cas Cookie,So jump to login!");
                    default:
                        if (response.data) {
                            console.error(response.data);
                            throw Error(response.data);
                        }
                        else if (response.msg) {
                            console.error(response.msg);
                            throw Error(response.msg);
                        }
                        else {
                            console.error('cas unknown error');
                            throw Error('Unknown Error: Cas auth exception!');
                        }
                }
            }));
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: YunzaiStartupService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: YunzaiStartupService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.6", ngImport: i0, type: YunzaiStartupService, decorators: [{
            type: Injectable
        }] });
export function mapYzSideToYelonMenu(menus) {
    menus.forEach((menu) => {
        if (menu.children && menu.hideChildren) {
            menu.children.forEach((c) => (c.hide = true));
        }
        menu.badgeDot = menu.badge_dot || null;
        menu.badgeStatus = menu.badge_status || null;
        menu.shortcutRoot = menu.shortcut_root || null;
        menu.reuse = true;
        if (menu.children) {
            mapYzSideToYelonMenu(menu.children);
        }
    });
}
export function generateAbility(menus, abilities, prefix) {
    menus.forEach(menu => {
        if (menu.link) {
            prefix += menu.link;
        }
        else {
            prefix += '';
        }
        if (menu.menuAuths) {
            menu.menuAuths.forEach((a) => {
                abilities.push(`${prefix}:${a}`);
                abilities.push(a);
            });
        }
        if (menu.children) {
            generateAbility(menu.children, abilities, prefix);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,