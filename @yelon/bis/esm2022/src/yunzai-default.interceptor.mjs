import { HttpErrorResponse, HttpResponseBase } from '@angular/common/http';
import { Injector, inject } from '@angular/core';
import { of, throwError, mergeMap, catchError } from 'rxjs';
import { IGNORE_BASE_URL } from '@yelon/theme';
import { YUNZAI_CONFIG } from '@yelon/util';
import { checkStatus, getAdditionalHeaders, goTo, toLogin } from './helper';
import { tryRefreshToken } from './refresh-token';
function handleData(injector, ev, req, next) {
    checkStatus(injector, ev);
    const config = injector.get(YUNZAI_CONFIG).bis;
    switch (ev.status) {
        case 200:
            return of(ev);
        case 401:
            if (config.refreshTokenEnabled && config.refreshTokenType === 're-request') {
                const unAuthorizationReq = req.clone();
                unAuthorizationReq.headers.delete('Authorization');
                return tryRefreshToken(injector, ev, unAuthorizationReq, next);
            }
            toLogin(injector);
            break;
        case 403:
        case 404:
        case 500:
            goTo(injector, `/exception/${ev.status}?url=${req.urlWithParams}`);
            break;
        default:
            if (ev instanceof HttpErrorResponse) {
                console.warn('未可知错误，大部分是由于后端不支持跨域CORS或无效配置引起，请参考 https://ng.yunzainfo.com/docs/server 解决跨域问题', ev);
            }
            break;
    }
    if (ev instanceof HttpErrorResponse) {
        return throwError(() => ev);
    }
    else if (ev._throw) {
        return throwError(() => ev.body);
    }
    else {
        return of(ev);
    }
}
export const yunzaiDefaultInterceptor = (req, next) => {
    const config = inject(YUNZAI_CONFIG).bis;
    const { baseUrl } = config;
    let url = req.url;
    if (!req.context.get(IGNORE_BASE_URL) && !url.startsWith('https://') && !url.startsWith('http://')) {
        url = baseUrl + (baseUrl.endsWith('/') && url.startsWith('/') ? url.substring(1) : url);
    }
    if (url.includes('.json') && url.includes('assets')) {
        url = req.url;
    }
    const newReq = req.clone({ url, setHeaders: getAdditionalHeaders(req.headers) });
    const injector = inject(Injector);
    return next(newReq).pipe(mergeMap(ev => {
        if (ev instanceof HttpResponseBase) {
            return handleData(injector, ev, newReq, next);
        }
        return of(ev);
    }), catchError((err) => handleData(injector, err, newReq, next)));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieXVuemFpLWRlZmF1bHQuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9iaXMvc3JjL3l1bnphaS1kZWZhdWx0LmludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxpQkFBaUIsRUFJakIsZ0JBQWdCLEVBQ2pCLE1BQU0sc0JBQXNCLENBQUM7QUFDOUIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFjLEVBQUUsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUV4RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQy9DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHNUMsT0FBTyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxJQUFJLEVBQW9CLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUM5RixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFbEQsU0FBUyxVQUFVLENBQ2pCLFFBQWtCLEVBQ2xCLEVBQW9CLEVBQ3BCLEdBQTJCLEVBQzNCLElBQW1CO0lBRW5CLFdBQVcsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDMUIsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxHQUFJLENBQUM7SUFDaEQsUUFBUSxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsS0FBSyxHQUFHO1lBQ04sT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDaEIsS0FBSyxHQUFHO1lBQ04sSUFBSSxNQUFNLENBQUMsbUJBQW1CLElBQUksTUFBTSxDQUFDLGdCQUFnQixLQUFLLFlBQVksRUFBRSxDQUFDO2dCQUMzRSxNQUFN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SUFDaEIsQ0FBQyxDQUFDLEVBQ0YsVUFBVSxDQUFDLENBQUMsR0FBc0IsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQ2hGLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBIdHRwRXJyb3JSZXNwb25zZSxcbiAgSHR0cEhhbmRsZXJGbixcbiAgSHR0cEludGVyY2VwdG9yRm4sXG4gIEh0dHBSZXF1ZXN0LFxuICBIdHRwUmVzcG9uc2VCYXNlXG59IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IEluamVjdG9yLCBpbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCB0aHJvd0Vycm9yLCBtZXJnZU1hcCwgY2F0Y2hFcnJvciB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBJR05PUkVfQkFTRV9VUkwgfSBmcm9tICdAeWVsb24vdGhlbWUnO1xuaW1wb3J0IHsgWVVOWkFJX0NPTkZJRyB9IGZyb20gJ0B5ZWxvbi91dGlsJztcbmltcG9ydCB7IE56U2FmZUFueSB9IGZyb20gJ25nLXpvcnJvLWFudGQvY29yZS90eXBlcyc7XG5cbmltcG9ydCB7IGNoZWNrU3RhdHVzLCBnZXRBZGRpdGlvbmFsSGVhZGVycywgZ29UbywgUmVUaHJvd0h0dHBFcnJvciwgdG9Mb2dpbiB9IGZyb20gJy4vaGVscGVyJztcbmltcG9ydCB7IHRyeVJlZnJlc2hUb2tlbiB9IGZyb20gJy4vcmVmcmVzaC10b2tlbic7XG5cbmZ1bmN0aW9uIGhhbmRsZURhdGEoXG4gIGluamVjdG9yOiBJbmplY3RvcixcbiAgZXY6IEh0dHBSZXNwb25zZUJhc2UsXG4gIHJlcTogSHR0cFJlcXVlc3Q8TnpTYWZlQW55PixcbiAgbmV4dDogSHR0cEhhbmRsZXJGblxuKTogT2JzZXJ2YWJsZTxOelNhZmVBbnk+IHtcbiAgY2hlY2tTdGF0dXMoaW5qZWN0b3IsIGV2KTtcbiAgY29uc3QgY29uZmlnID0gaW5qZWN0b3IuZ2V0KFlVTlpBSV9DT05GSUcpLmJpcyE7XG4gIHN3aXRjaCAoZXYuc3RhdHVzKSB7XG4gICAgY2FzZSAyMDA6XG4gICAgICByZXR1cm4gb2YoZXYpO1xuICAgIGNhc2UgNDAxOlxuICAgICAgaWYgKGNvbmZpZy5yZWZyZXNoVG9rZW5FbmFibGVkICYmIGNvbmZpZy5yZWZyZXNoVG9rZW5UeXBlID09PSAncmUtcmVxdWVzdCcpIHtcbiAgICAgICAgY29uc3QgdW5BdXRob3JpemF0aW9uUmVxID0gcmVxLmNsb25lKCk7XG4gICAgICAgIHVuQXV0aG9yaXphdGlvblJlcS5oZWFkZXJzLmRlbGV0ZSgnQXV0aG9yaXphdGlvbicpO1xuICAgICAgICByZXR1cm4gdHJ5UmVmcmVzaFRva2VuKGluamVjdG9yLCBldiwgdW5BdXRob3JpemF0aW9uUmVxLCBuZXh0KTtcbiAgICAgIH1cbiAgICAgIHRvTG9naW4oaW5qZWN0b3IpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0MDM6XG4gICAgY2FzZSA0MDQ6XG4gICAgY2FzZSA1MDA6XG4gICAgICBnb1RvKGluamVjdG9yLCBgL2V4Y2VwdGlvbi8ke2V2LnN0YXR1c30/dXJsPSR7cmVxLnVybFdpdGhQYXJhbXN9YCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKGV2IGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICfmnKrlj6/nn6XplJnor6/vvIzlpKfpg6jliIbmmK/nlLHkuo7lkI7nq6/kuI3mlK/mjIHot6jln59DT1JT5oiW5peg5pWI6YWN572u5byV6LW377yM6K+35Y+C6ICDIGh0dHBzOi8vbmcueXVuemFpbmZvLmNvbS9kb2NzL3NlcnZlciDop6PlhrPot6jln5/pl67popgnLFxuICAgICAgICAgIGV2XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgfVxuICBpZiAoZXYgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgIHJldHVybiB0aHJvd0Vycm9yKCgpID0+IGV2KTtcbiAgfSBlbHNlIGlmICgoZXYgYXMgdW5rbm93biBhcyBSZVRocm93SHR0cEVycm9yKS5fdGhyb3cpIHtcbiAgICByZXR1cm4gdGhyb3dFcnJvcigoKSA9PiAoZXYgYXMgdW5rbm93biBhcyBSZVRocm93SHR0cEVycm9yKS5ib2R5KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2YoZXYpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCB5dW56YWlEZWZhdWx0SW50ZXJjZXB0b3I6IEh0dHBJbnRlcmNlcHRvckZuID0gKHJlcSwgbmV4dCkgPT4ge1xuICBjb25zdCBjb25maWcgPSBpbmplY3QoWVVOWkFJX0NPTkZJRykuYmlzITtcbiAgY29uc3QgeyBiYXNlVXJsIH0gPSBjb25maWc7XG4gIGxldCB1cmwgPSByZXEudXJsO1xuICBpZiAoIXJlcS5jb250ZXh0LmdldChJR05PUkVfQkFTRV9VUkwpICYmICF1cmwuc3RhcnRzV2l0aCgnaHR0cHM6Ly8nKSAmJiAhdXJsLnN0YXJ0c1dpdGgoJ2h0dHA6Ly8nKSkge1xuICAgIHVybCA9IGJhc2VVcmwgKyAoYmFzZVVybCEuZW5kc1dpdGgoJy8nKSAmJiB1cmwuc3RhcnRzV2l0aCgnLycpID8gdXJsLnN1YnN0cmluZygxKSA6IHVybCk7XG4gIH1cbiAgaWYgKHVybC5pbmNsdWRlcygnLmpzb24nKSAmJiB1cmwuaW5jbHVkZXMoJ2Fzc2V0cycpKSB7XG4gICAgdXJsID0gcmVxLnVybDtcbiAgfVxuICBjb25zdCBuZXdSZXEgPSByZXEuY2xvbmUoeyB1cmwsIHNldEhlYWRlcnM6IGdldEFkZGl0aW9uYWxIZWFkZXJzKHJlcS5oZWFkZXJzKSB9KTtcbiAgY29uc3QgaW5qZWN0b3IgPSBpbmplY3QoSW5qZWN0b3IpO1xuICByZXR1cm4gbmV4dChuZXdSZXEpLnBpcGUoXG4gICAgbWVyZ2VNYXAoZXYgPT4ge1xuICAgICAgaWYgKGV2IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlQmFzZSkge1xuICAgICAgICByZXR1cm4gaGFuZGxlRGF0YShpbmplY3RvciwgZXYsIG5ld1JlcSwgbmV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gb2YoZXYpO1xuICAgIH0pLFxuICAgIGNhdGNoRXJyb3IoKGVycjogSHR0cEVycm9yUmVzcG9uc2UpID0+IGhhbmRsZURhdGEoaW5qZWN0b3IsIGVyciwgbmV3UmVxLCBuZXh0KSlcbiAgKTtcbn07XG4iXX0=