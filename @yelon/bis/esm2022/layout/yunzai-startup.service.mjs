import { APP_INITIALIZER, Inject, Injectable } from '@angular/core';
import { mergeMap, of } from 'rxjs';
import { YUNZAI_I18N_TOKEN } from '@yelon/theme';
import { WINDOW, deepCopy, log, useLocalStorageCurrent, useLocalStorageUser, useLocalStorageDefaultRoute } from '@yelon/util';
import { BUSINESS_DEFAULT_CONFIG, mergeBisConfig } from './bis.config';
import { ICONS } from './icon/style-icons';
import * as i0 from "@angular/core";
import * as i1 from "ng-zorro-antd/icon";
import * as i2 from "@yelon/theme";
import * as i3 from "@yelon/acl";
import * as i4 from "./yunzai-auth.service";
import * as i5 from "@yelon/util";
import * as i6 from "./yunzai-i18n.service";
export class YunzaiStartupService {
    constructor(iconSrv, menuService, i18n, win, settingService, aclService, titleService, yzAuthService, configService) {
        this.menuService = menuService;
        this.i18n = i18n;
        this.win = win;
        this.settingService = settingService;
        this.aclService = aclService;
        this.titleService = titleService;
        this.yzAuthService = yzAuthService;
        this.configService = configService;
        this.config = BUSINESS_DEFAULT_CONFIG;
        this.config = mergeBisConfig(this.configService);
        iconSrv.addIcon(...ICONS);
    }
    load() {
        log('startup.service: ', 'load');
        let defaultLang = this.settingService.layout.lang || this.i18n.defaultLang;
        return this.yzAuthService.login().pipe(mergeMap(() => {
            return this.i18n.loadLangData(defaultLang);
        }), mergeMap(langData => {
            log('startup.service: ', 'set i18n, defaultLang->', defaultLang, ' langData->', langData);
            this.i18n.use(defaultLang, langData);
            return of(void 0);
        }), mergeMap(v => {
            this.systemInit();
            log('startup.service: preloader finish');
            if (this.win && this.win.appBootstrap) {
                this.win.appBootstrap();
            }
            return of(v);
        }));
    }
    systemInit() {
        log('startup.service: system init');
        const [setCurrent] = useLocalStorageCurrent();
        const [, getUser] = useLocalStorageUser();
        const [setDefaultRoute] = useLocalStorageDefaultRoute();
        const yunzaiUser = getUser();
        // @ts-ignore
        const yunzaiMenus = deepCopy(yunzaiUser.menu).filter(m => m.systemCode && m.systemCode === this.config.systemCode);
        mapYzSideToYelonMenu(yunzaiMenus);
        const currentMenu = yunzaiMenus.pop();
        if (currentMenu) {
            this.settingService.setApp({ name: currentMenu.text, description: currentMenu.intro });
            this.settingService.setUser({
                name: yunzaiUser.realname,
                avatar: `${this.config.baseUrl}/filecenter/file/${yunzaiUser.avatarId}` || '',
                email: yunzaiUser.email
            });
            this.titleService.default = currentMenu && currentMenu.text ? currentMenu.text : 'default application name';
            this.titleService.setTitle(currentMenu && currentMenu.text ? currentMenu.text : 'no title');
            const abilities = [];
            generateAbility([currentMenu], abilities, '');
            this.aclService.attachRole(yunzaiUser?.roles
                .map((role) => {
                return role.roleValue;
            })
                .filter((a) => !!a) || []);
            this.aclService.attachAbility(abilities);
            this.menuService.add([currentMenu]);
            setCurrent({
                name: currentMenu.text,
                intro: currentMenu.intro || '',
                icon: currentMenu.appIconUrl || './assets/tmp/img/avatar.jpg'
            });
            const attributes = currentMenu.attribute;
            if (attributes) {
                const attr = JSON.parse(attributes);
                if (attr && attr.defaultRoute) {
                    setDefaultRoute(attr.defaultRoute);
                }
                else {
                    setDefaultRoute('/displayIndex');
                }
            }
            else {
                setDefaultRoute('/displayIndex');
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: YunzaiStartupService, deps: [{ token: i1.NzIconService }, { token: i2.MenuService }, { token: YUNZAI_I18N_TOKEN }, { token: WINDOW }, { token: i2.SettingsService }, { token: i3.ACLService }, { token: i2.TitleService }, { token: i4.YunzaiAuthService }, { token: i5.YunzaiConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: YunzaiStartupService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.2.1", ngImport: i0, type: YunzaiStartupService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.NzIconService }, { type: i2.MenuService }, { type: i6.YunzaiI18NService, decorators: [{
                    type: Inject,
                    args: [YUNZAI_I18N_TOKEN]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: i2.SettingsService }, { type: i3.ACLService }, { type: i2.TitleService }, { type: i4.YunzaiAuthService }, { type: i5.YunzaiConfigService }] });
export function mapYzSideToYelonMenu(menus) {
    menus.forEach(menu => {
        if (menu.children && menu.hideChildren) {
            menu.children.forEach(c => (c.hide = true));
        }
        menu.badgeDot = menu.badge_dot || null;
        menu.badgeStatus = menu.badge_status || null;
        menu.shortcutRoot = menu.shortcut_root || null;
        menu.reuse = true;
        if (menu.children) {
            mapYzSideToYelonMenu(menu.children);
        }
    });
}
export function generateAbility(menus, abilities, prefix) {
    menus.forEach(menu => {
        if (menu.link) {
            prefix += menu.link;
        }
        else {
            prefix += '';
        }
        if (menu.menuAuths) {
            menu.menuAuths.forEach((a) => {
                abilities.push(`${prefix}:${a}`);
                abilities.push(a);
            });
        }
        if (menu.children) {
            generateAbility(menu.children, abilities, prefix);
        }
    });
}
export function YunzaiStartupServiceFactory(startupService) {
    return () => startupService.load();
}
//@ts-ignore
export const YUNZAI_APPINIT_PROVIDES = [
    YunzaiStartupService,
    {
        provide: APP_INITIALIZER,
        useFactory: YunzaiStartupServiceFactory,
        deps: [YunzaiStartupService],
        multi: true
    }
];
//# sourceMappingURL=data:application/json;base64,