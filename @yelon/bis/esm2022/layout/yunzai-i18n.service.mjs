import { registerLocaleData } from '@angular/common';
import ngEn from '@angular/common/locales/en';
import { Inject, Injectable } from '@angular/core';
import { catchError, of, Subject, takeUntil } from 'rxjs';
import { enUS as dfEn } from 'date-fns/locale';
import { map } from 'rxjs/operators';
import { YunzaiI18nBaseService, en_US as yelonEnUS } from '@yelon/theme';
import { en_US as zorroEnUS } from 'ng-zorro-antd/i18n';
import { YUNZAI_LANGS } from './yunzai-lang';
import { YA_SERVICE_TOKEN } from "@yelon/auth";
import * as i0 from "@angular/core";
import * as i1 from "@yelon/theme";
import * as i2 from "ng-zorro-antd/i18n";
import * as i3 from "@angular/cdk/platform";
import * as i4 from "@yelon/util/config";
const DEFAULT = 'zh-CN';
export class YunzaiI18NService extends YunzaiI18nBaseService {
    constructor(http, settings, nzI18nService, yelonLocaleService, platform, tokenService, cogSrv) {
        super(cogSrv);
        this.http = http;
        this.settings = settings;
        this.nzI18nService = nzI18nService;
        this.yelonLocaleService = yelonLocaleService;
        this.platform = platform;
        this.tokenService = tokenService;
        this._defaultLang = DEFAULT;
        this.$destroy = new Subject();
        if (this.tokenService.get()?.access_token) {
            const defaultLang = this.getDefaultLang();
            this.getLangs()
                .pipe(takeUntil(this.$destroy))
                .subscribe(langs => {
                this._defaultLang = langs.findIndex(w => w.code === defaultLang) === -1 ? DEFAULT : defaultLang;
            });
        }
    }
    getDefaultLang() {
        if (!this.platform.isBrowser) {
            return DEFAULT;
        }
        if (this.settings.layout.lang) {
            return this.settings.layout.lang;
        }
        let res = (navigator.languages ? navigator.languages[0] : null) || navigator.language;
        const arr = res.split('-');
        return arr.length <= 1 ? res : `${arr[0]}-${arr[1].toUpperCase()}`;
    }
    loadLangData(lang) {
        if (ngDevMode) {
            return this.http.get(`assets/tmp/i18n/${lang}.json`);
        }
        else {
            return this.http
                .get(`/i18n/api/v2/language/${lang}`)
                .pipe(catchError(() => this.http.get(`assets/tmp/i18n/${lang}.json`)));
        }
    }
    use(lang, data) {
        if (this._currentLang === lang)
            return;
        this._data = this.flatData(data, []);
        const item = YUNZAI_LANGS[lang];
        if (item) {
            registerLocaleData(item.ng);
            this.nzI18nService.setLocale(item.zorro);
            this.nzI18nService.setDateLocale(item.date);
            this.yelonLocaleService.setLocale(item.yelon);
            this._currentLang = lang;
            this._change$.next(lang);
        }
        else {
            registerLocaleData(ngEn);
            this.nzI18nService.setLocale(zorroEnUS);
            this.nzI18nService.setDateLocale(dfEn);
            this.yelonLocaleService.setLocale(yelonEnUS);
            this._currentLang = lang;
            this._change$.next(lang);
        }
    }
    getLangs() {
        const langs = Object.keys(YUNZAI_LANGS).map(code => {
            const item = YUNZAI_LANGS[code];
            return { code, text: item.text, abbr: item.abbr, image: undefined };
        });
        if (ngDevMode) {
            return of(langs);
        }
        else {
            return this.http.get(`/i18n/api/v2/language`).pipe(map((response) => {
                return response.data;
            }), catchError(() => of(langs)));
        }
    }
    ngOnDestroy() {
        this.$destroy.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YunzaiI18NService, deps: [{ token: i1._HttpClient }, { token: i1.SettingsService }, { token: i2.NzI18nService }, { token: i1.YelonLocaleService }, { token: i3.Platform }, { token: YA_SERVICE_TOKEN }, { token: i4.YunzaiConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YunzaiI18NService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: YunzaiI18NService, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: function () { return [{ type: i1._HttpClient }, { type: i1.SettingsService }, { type: i2.NzI18nService }, { type: i1.YelonLocaleService }, { type: i3.Platform }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [YA_SERVICE_TOKEN]
                }] }, { type: i4.YunzaiConfigService }]; } });
//# sourceMappingURL=data:application/json;base64,