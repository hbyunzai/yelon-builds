import { registerLocaleData } from '@angular/common';
import { ENVIRONMENT_INITIALIZER, LOCALE_ID, importProvidersFrom, inject, makeEnvironmentProviders } from '@angular/core';
import { YUNZAI_CONFIG } from '@yelon/util/config';
import { NzDrawerModule } from 'ng-zorro-antd/drawer';
import { NZ_DATE_LOCALE, provideNzI18n } from 'ng-zorro-antd/i18n';
import { NzIconService } from 'ng-zorro-antd/icon';
import { NzModalModule } from 'ng-zorro-antd/modal';
import { ICONS } from './icons';
import { YELON_LOCALE, YELON_LOCALE_SERVICE_PROVIDER } from './locale';
import zhCN from './locale/languages/zh-CN';
import { YUNZAI_I18N_TOKEN } from './services';
import { YUNZAI_SETTING_DEFAULT } from './services/settings/settings.service';
export function provideYunzai(options) {
    const lang = options?.defaultLang;
    const provides = [
        { provide: YUNZAI_CONFIG, useValue: options?.config },
        { provide: YELON_LOCALE, useValue: lang?.yelon ?? zhCN },
        YELON_LOCALE_SERVICE_PROVIDER,
        importProvidersFrom([NzDrawerModule, NzModalModule]),
        YUNZAI_SETTING_DEFAULT
    ];
    if (lang) {
        registerLocaleData(lang.ng, lang.abbr);
        provides.push({ provide: LOCALE_ID, useValue: lang.abbr }, provideNzI18n(lang.zorro), {
            provide: NZ_DATE_LOCALE,
            useValue: lang.date
        });
    }
    const i18nCls = options?.i18nClass;
    if (i18nCls) {
        provides.push({ provide: YUNZAI_I18N_TOKEN, useClass: i18nCls, multi: false });
    }
    const icons = [...ICONS, ...(options.icons ?? [])];
    provides.push({
        provide: ENVIRONMENT_INITIALIZER,
        multi: true,
        useValue: () => {
            inject(NzIconService, { optional: true })?.addIcon(...icons);
        }
    });
    return makeEnvironmentProviders(provides);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lL3NyYy9wcm92aWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JELE9BQU8sRUFDTCx1QkFBdUIsRUFFdkIsU0FBUyxFQUdULG1CQUFtQixFQUNuQixNQUFNLEVBQ04sd0JBQXdCLEVBQ3pCLE1BQU0sZUFBZSxDQUFDO0FBSXZCLE9BQU8sRUFBRSxhQUFhLEVBQWdCLE1BQU0sb0JBQW9CLENBQUM7QUFFakUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxjQUFjLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsNkJBQTZCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDdkUsT0FBTyxJQUFJLE1BQU0sMEJBQTBCLENBQUM7QUFDNUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sWUFBWSxDQUFDO0FBQy9DLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBc0I5RSxNQUFNLFVBQVUsYUFBYSxDQUFDLE9BQTZCO0lBQ3pELE1BQU0sSUFBSSxHQUFHLE9BQU8sRUFBRSxXQUFXLENBQUM7SUFDbEMsTUFBTSxRQUFRLEdBQTJDO1FBQ3ZELEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRTtRQUNyRCxFQUFFLE9BQU8sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxLQUFLLElBQUksSUFBSSxFQUFFO1FBQ3hELDZCQUE2QjtRQUM3QixtQkFBbUIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNwRCxzQkFBc0I7S0FDdkIsQ0FBQztJQUNGLElBQUksSUFBSSxFQUFFLENBQUM7UUFDVCxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN2QyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDcEYsT0FBTyxFQUFFLGNBQWM7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsU0FBUyxDQUFDO0lBQ25DLElBQUksT0FBTyxFQUFFLENBQUM7UUFDWixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDakYsQ0FBQztJQUVELE1BQU0sS0FBSyxHQUFxQixDQUFDLEdBQUcsS0FBSyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckUsUUFBUSxDQUFDLElBQUksQ0FBQztRQUNaLE9BQU8sRUFBRSx1QkFBdUI7UUFDaEMsS0FBSyxFQUFFLElBQUk7UUFDWCxRQUFRLEVBQUUsR0FBRyxFQUFFO1lBQ2IsTUFBTSxDQUFDLGFBQWEsRUFBRSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQy9ELENBQUM7S0FDRixDQUFDLENBQUM7SUFDSCxPQUFPLHdCQUF3QixDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWdpc3RlckxvY2FsZURhdGEgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgRU5WSVJPTk1FTlRfSU5JVElBTElaRVIsXG4gIEVudmlyb25tZW50UHJvdmlkZXJzLFxuICBMT0NBTEVfSUQsXG4gIFByb3ZpZGVyLFxuICBUeXBlLFxuICBpbXBvcnRQcm92aWRlcnNGcm9tLFxuICBpbmplY3QsXG4gIG1ha2VFbnZpcm9ubWVudFByb3ZpZGVyc1xufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHR5cGUgeyBJY29uRGVmaW5pdGlvbiB9IGZyb20gJ0BhbnQtZGVzaWduL2ljb25zLWFuZ3VsYXInO1xuXG5pbXBvcnQgeyBZVU5aQUlfQ09ORklHLCBZdW56YWlDb25maWcgfSBmcm9tICdAeWVsb24vdXRpbC9jb25maWcnO1xuaW1wb3J0IHR5cGUgeyBOelNhZmVBbnkgfSBmcm9tICduZy16b3Jyby1hbnRkL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgTnpEcmF3ZXJNb2R1bGUgfSBmcm9tICduZy16b3Jyby1hbnRkL2RyYXdlcic7XG5pbXBvcnQgeyBOWl9EQVRFX0xPQ0FMRSwgcHJvdmlkZU56STE4biB9IGZyb20gJ25nLXpvcnJvLWFudGQvaTE4bic7XG5pbXBvcnQgeyBOekljb25TZXJ2aWNlIH0gZnJvbSAnbmctem9ycm8tYW50ZC9pY29uJztcbmltcG9ydCB7IE56TW9kYWxNb2R1bGUgfSBmcm9tICduZy16b3Jyby1hbnRkL21vZGFsJztcblxuaW1wb3J0IHsgSUNPTlMgfSBmcm9tICcuL2ljb25zJztcbmltcG9ydCB7IFlFTE9OX0xPQ0FMRSwgWUVMT05fTE9DQUxFX1NFUlZJQ0VfUFJPVklERVIgfSBmcm9tICcuL2xvY2FsZSc7XG5pbXBvcnQgemhDTiBmcm9tICcuL2xvY2FsZS9sYW5ndWFnZXMvemgtQ04nO1xuaW1wb3J0IHsgWVVOWkFJX0kxOE5fVE9LRU4gfSBmcm9tICcuL3NlcnZpY2VzJztcbmltcG9ydCB7IFlVTlpBSV9TRVRUSU5HX0RFRkFVTFQgfSBmcm9tICcuL3NlcnZpY2VzL3NldHRpbmdzL3NldHRpbmdzLnNlcnZpY2UnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFl1bnphaVByb3ZpZGVPcHRpb25zIHtcbiAgY29uZmlnPzogWXVuemFpQ29uZmlnO1xuICAvKipcbiAgICogSW5pdGlhbGl6ZSBkZWZhdWx0IGxhbmd1YWdlXG4gICAqXG4gICAqIOWIneWni+WMlum7mOiupOivreiogFxuICAgKi9cbiAgZGVmYXVsdExhbmc/OiBZdW56YWlQcm92aWRlTGFuZztcbiAgaTE4bkNsYXNzPzogVHlwZTxOelNhZmVBbnk+O1xuICBpY29ucz86IEljb25EZWZpbml0aW9uW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgWXVuemFpUHJvdmlkZUxhbmcge1xuICBhYmJyOiBzdHJpbmc7XG4gIG5nOiBOelNhZmVBbnk7XG4gIHpvcnJvOiBOelNhZmVBbnk7XG4gIGRhdGU6IE56U2FmZUFueTtcbiAgeWVsb246IE56U2FmZUFueTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVZdW56YWkob3B0aW9uczogWXVuemFpUHJvdmlkZU9wdGlvbnMpOiBFbnZpcm9ubWVudFByb3ZpZGVycyB7XG4gIGNvbnN0IGxhbmcgPSBvcHRpb25zPy5kZWZhdWx0TGFuZztcbiAgY29uc3QgcHJvdmlkZXM6IEFycmF5PFByb3ZpZGVyIHwgRW52aXJvbm1lbnRQcm92aWRlcnM+ID0gW1xuICAgIHsgcHJvdmlkZTogWVVOWkFJX0NPTkZJRywgdXNlVmFsdWU6IG9wdGlvbnM/LmNvbmZpZyB9LFxuICAgIHsgcHJvdmlkZTogWUVMT05fTE9DQUxFLCB1c2VWYWx1ZTogbGFuZz8ueWVsb24gPz8gemhDTiB9LFxuICAgIFlFTE9OX0xPQ0FMRV9TRVJWSUNFX1BST1ZJREVSLFxuICAgIGltcG9ydFByb3ZpZGVyc0Zyb20oW056RHJhd2VyTW9kdWxlLCBOek1vZGFsTW9kdWxlXSksXG4gICAgWVVOWkFJX1NFVFRJTkdfREVGQVVMVFxuICBdO1xuICBpZiAobGFuZykge1xuICAgIHJlZ2lzdGVyTG9jYWxlRGF0YShsYW5nLm5nLCBsYW5nLmFiYnIpO1xuICAgIHByb3ZpZGVzLnB1c2goeyBwcm92aWRlOiBMT0NBTEVfSUQsIHVzZVZhbHVlOiBsYW5nLmFiYnIgfSwgcHJvdmlkZU56STE4bihsYW5nLnpvcnJvKSwge1xuICAgICAgcHJvdmlkZTogTlpfREFURV9MT0NBTEUsXG4gICAgICB1c2VWYWx1ZTogbGFuZy5kYXRlXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBpMThuQ2xzID0gb3B0aW9ucz8uaTE4bkNsYXNzO1xuICBpZiAoaTE4bkNscykge1xuICAgIHByb3ZpZGVzLnB1c2goeyBwcm92aWRlOiBZVU5aQUlfSTE4Tl9UT0tFTiwgdXNlQ2xhc3M6IGkxOG5DbHMsIG11bHRpOiBmYWxzZSB9KTtcbiAgfVxuXG4gIGNvbnN0IGljb25zOiBJY29uRGVmaW5pdGlvbltdID0gWy4uLklDT05TLCAuLi4ob3B0aW9ucy5pY29ucyA/PyBbXSldO1xuICBwcm92aWRlcy5wdXNoKHtcbiAgICBwcm92aWRlOiBFTlZJUk9OTUVOVF9JTklUSUFMSVpFUixcbiAgICBtdWx0aTogdHJ1ZSxcbiAgICB1c2VWYWx1ZTogKCkgPT4ge1xuICAgICAgaW5qZWN0KE56SWNvblNlcnZpY2UsIHsgb3B0aW9uYWw6IHRydWUgfSk/LmFkZEljb24oLi4uaWNvbnMpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBtYWtlRW52aXJvbm1lbnRQcm92aWRlcnMocHJvdmlkZXMpO1xufVxuIl19