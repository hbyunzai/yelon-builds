import { Pipe, inject } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import * as i0 from "@angular/core";
const ICON_YES = `<svg viewBox="64 64 896 896" fill="currentColor" width="1em" height="1em" aria-hidden="true"><path d="M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 0 0-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z"></path></svg>`;
const ICON_NO = `<svg viewBox="64 64 896 896" fill="currentColor" width="1em" height="1em" aria-hidden="true"><path d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"></path></svg>`;
const CLS_YES = `class="yn__yes"`;
const CLS_NO = `class="yn__no"`;
export function yn(value, opt) {
    let html = '';
    let { yes, no, mode } = { ...opt };
    yes = yes || '是';
    no = no || '否';
    switch (mode) {
        case 'full':
            html = value
                ? `<i ${CLS_YES}>${ICON_YES}<span>${yes}</span></i>`
                : `<i ${CLS_NO}>${ICON_NO}<span>${no}</span></i>`;
            break;
        case 'text':
            html = value ? `<i ${CLS_YES}>${yes}</i>` : `<i ${CLS_NO}>${no}</i>`;
            break;
        default:
            html = value ? `<i ${CLS_YES} title="${yes}">${ICON_YES}</i>` : `<i ${CLS_NO} title="${no}">${ICON_NO}</i>`;
            break;
    }
    return html;
}
export class YNPipe {
    constructor() {
        this.dom = inject(DomSanitizer);
    }
    transform(value, yes, no, mode, isSafeHtml = true) {
        const html = yn(value, { yes, no, mode });
        return isSafeHtml ? this.dom.bypassSecurityTrustHtml(html) : html;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: YNPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.2.11", ngImport: i0, type: YNPipe, isStandalone: true, name: "yn" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.11", ngImport: i0, type: YNPipe, decorators: [{
            type: Pipe,
            args: [{ name: 'yn', standalone: true }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieW4ucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL3RoZW1lL3NyYy9waXBlcy95bi95bi5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsWUFBWSxFQUFZLE1BQU0sMkJBQTJCLENBQUM7O0FBSW5FLE1BQU0sUUFBUSxHQUFHLGdUQUFnVCxDQUFDO0FBQ2xVLE1BQU0sT0FBTyxHQUFHLGliQUFpYixDQUFDO0FBQ2xjLE1BQU0sT0FBTyxHQUFHLGlCQUFpQixDQUFDO0FBQ2xDLE1BQU0sTUFBTSxHQUFHLGdCQUFnQixDQUFDO0FBUWhDLE1BQU0sVUFBVSxFQUFFLENBQUMsS0FBYyxFQUFFLEdBQWU7SUFDaEQsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0lBQ2QsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ25DLEdBQUcsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDO0lBQ2pCLEVBQUUsR0FBRyxFQUFFLElBQUksR0FBRyxDQUFDO0lBQ2YsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUNiLEtBQUssTUFBTTtZQUNULElBQUksR0FBRyxLQUFLO2dCQUNWLENBQUMsQ0FBQyxNQUFNLE9BQU8sSUFBSSxRQUFRLFNBQVMsR0FBRyxhQUFhO2dCQUNwRCxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksT0FBTyxTQUFTLEVBQUUsYUFBYSxDQUFDO1lBQ3BELE1BQU07UUFDUixLQUFLLE1BQU07WUFDVCxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNLE9BQU8sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxNQUFNLElBQUksRUFBRSxNQUFNLENBQUM7WUFDckUsTUFBTTtRQUNSO1lBQ0UsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBTSxPQUFPLFdBQVcsR0FBRyxLQUFLLFFBQVEsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLE1BQU0sV0FBVyxFQUFFLEtBQUssT0FBTyxNQUFNLENBQUM7WUFDNUcsTUFBTTtJQUNWLENBQUM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFHRCxNQUFNLE9BQU8sTUFBTTtJQURuQjtRQUVtQixRQUFHLEdBQUcsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO0tBTTdDO0lBSkMsU0FBUyxDQUFDLEtBQWMsRUFBRSxHQUFZLEVBQUUsRUFBVyxFQUFFLElBQWEsRUFBRSxhQUFzQixJQUFJO1FBQzVGLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDMUMsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUNwRSxDQUFDOytHQU5VLE1BQU07NkdBQU4sTUFBTTs7NEZBQU4sTUFBTTtrQkFEbEIsSUFBSTttQkFBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5leHBvcnQgdHlwZSBZTk1vZGUgPSAnZnVsbCcgfCAnaWNvbicgfCAndGV4dCc7XG5cbmNvbnN0IElDT05fWUVTID0gYDxzdmcgdmlld0JveD1cIjY0IDY0IDg5NiA4OTZcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgd2lkdGg9XCIxZW1cIiBoZWlnaHQ9XCIxZW1cIiBhcmlhLWhpZGRlbj1cInRydWVcIj48cGF0aCBkPVwiTTkxMiAxOTBoLTY5LjljLTkuOCAwLTE5LjEgNC41LTI1LjEgMTIuMkw0MDQuNyA3MjQuNSAyMDcgNDc0YTMyIDMyIDAgMCAwLTI1LjEtMTIuMkgxMTJjLTYuNyAwLTEwLjQgNy43LTYuMyAxMi45bDI3My45IDM0N2MxMi44IDE2LjIgMzcuNCAxNi4yIDUwLjMgMGw0ODguNC02MTguOWM0LjEtNS4xLjQtMTIuOC02LjMtMTIuOHpcIj48L3BhdGg+PC9zdmc+YDtcbmNvbnN0IElDT05fTk8gPSBgPHN2ZyB2aWV3Qm94PVwiNjQgNjQgODk2IDg5NlwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIiB3aWR0aD1cIjFlbVwiIGhlaWdodD1cIjFlbVwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPjxwYXRoIGQ9XCJNNTYzLjggNTEybDI2Mi41LTMxMi45YzQuNC01LjIuNy0xMy4xLTYuMS0xMy4xaC03OS44Yy00LjcgMC05LjIgMi4xLTEyLjMgNS43TDUxMS42IDQ0OS44IDI5NS4xIDE5MS43Yy0zLTMuNi03LjUtNS43LTEyLjMtNS43SDIwM2MtNi44IDAtMTAuNSA3LjktNi4xIDEzLjFMNDU5LjQgNTEyIDE5Ni45IDgyNC45QTcuOTUgNy45NSAwIDAgMCAyMDMgODM4aDc5LjhjNC43IDAgOS4yLTIuMSAxMi4zLTUuN2wyMTYuNS0yNTguMSAyMTYuNSAyNTguMWMzIDMuNiA3LjUgNS43IDEyLjMgNS43aDc5LjhjNi44IDAgMTAuNS03LjkgNi4xLTEzLjFMNTYzLjggNTEyelwiPjwvcGF0aD48L3N2Zz5gO1xuY29uc3QgQ0xTX1lFUyA9IGBjbGFzcz1cInluX195ZXNcImA7XG5jb25zdCBDTFNfTk8gPSBgY2xhc3M9XCJ5bl9fbm9cImA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgWU5PcHRpb25zIHtcbiAgeWVzPzogc3RyaW5nO1xuICBubz86IHN0cmluZztcbiAgbW9kZT86IFlOTW9kZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHluKHZhbHVlOiBib29sZWFuLCBvcHQ/OiBZTk9wdGlvbnMpOiBzdHJpbmcge1xuICBsZXQgaHRtbCA9ICcnO1xuICBsZXQgeyB5ZXMsIG5vLCBtb2RlIH0gPSB7IC4uLm9wdCB9O1xuICB5ZXMgPSB5ZXMgfHwgJ+aYryc7XG4gIG5vID0gbm8gfHwgJ+WQpic7XG4gIHN3aXRjaCAobW9kZSkge1xuICAgIGNhc2UgJ2Z1bGwnOlxuICAgICAgaHRtbCA9IHZhbHVlXG4gICAgICAgID8gYDxpICR7Q0xTX1lFU30+JHtJQ09OX1lFU308c3Bhbj4ke3llc308L3NwYW4+PC9pPmBcbiAgICAgICAgOiBgPGkgJHtDTFNfTk99PiR7SUNPTl9OT308c3Bhbj4ke25vfTwvc3Bhbj48L2k+YDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ3RleHQnOlxuICAgICAgaHRtbCA9IHZhbHVlID8gYDxpICR7Q0xTX1lFU30+JHt5ZXN9PC9pPmAgOiBgPGkgJHtDTFNfTk99PiR7bm99PC9pPmA7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgaHRtbCA9IHZhbHVlID8gYDxpICR7Q0xTX1lFU30gdGl0bGU9XCIke3llc31cIj4ke0lDT05fWUVTfTwvaT5gIDogYDxpICR7Q0xTX05PfSB0aXRsZT1cIiR7bm99XCI+JHtJQ09OX05PfTwvaT5gO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgcmV0dXJuIGh0bWw7XG59XG5cbkBQaXBlKHsgbmFtZTogJ3luJywgc3RhbmRhbG9uZTogdHJ1ZSB9KVxuZXhwb3J0IGNsYXNzIFlOUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICBwcml2YXRlIHJlYWRvbmx5IGRvbSA9IGluamVjdChEb21TYW5pdGl6ZXIpO1xuXG4gIHRyYW5zZm9ybSh2YWx1ZTogYm9vbGVhbiwgeWVzPzogc3RyaW5nLCBubz86IHN0cmluZywgbW9kZT86IFlOTW9kZSwgaXNTYWZlSHRtbDogYm9vbGVhbiA9IHRydWUpOiBTYWZlSHRtbCB7XG4gICAgY29uc3QgaHRtbCA9IHluKHZhbHVlLCB7IHllcywgbm8sIG1vZGUgfSk7XG4gICAgcmV0dXJuIGlzU2FmZUh0bWwgPyB0aGlzLmRvbS5ieXBhc3NTZWN1cml0eVRydXN0SHRtbChodG1sKSA6IGh0bWw7XG4gIH1cbn1cbiJdfQ==