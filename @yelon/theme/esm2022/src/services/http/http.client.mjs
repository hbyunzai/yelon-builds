/* eslint-disable @typescript-eslint/no-explicit-any */
import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable, inject } from '@angular/core';
import { of, delay, finalize, switchMap, tap } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@yelon/util/config";
/**
 * 封装HttpClient，主要解决：
 * + 优化HttpClient在参数上便利性
 * + 统一实现 loading
 * + 统一处理时间格式问题
 */
export class _HttpClient {
    constructor(cogSrv) {
        this.http = inject(HttpClient);
        this.lc = 0;
        this.cog = cogSrv.merge('themeHttp', {
            nullValueHandling: 'include',
            dateValueHandling: 'timestamp'
        });
    }
    /**
     * Get whether it's loading
     *
     * 获取是否正在加载中
     */
    get loading() {
        return this.lc > 0;
    }
    /**
     * Get the currently loading count
     *
     * 获取当前加载中的数量
     */
    get loadingCount() {
        return this.lc;
    }
    parseParams(params) {
        const newParams = {};
        if (params instanceof HttpParams) {
            return params;
        }
        const { nullValueHandling, dateValueHandling } = this.cog;
        Object.keys(params).forEach(key => {
            let paramValue = params[key];
            // 忽略空值
            if (nullValueHandling === 'ignore' && paramValue == null)
                return;
            // 将时间转化为：时间戳 (秒)
            if (paramValue instanceof Date &&
                (dateValueHandling === 'timestamp' || dateValueHandling === 'timestampSecond')) {
                paramValue = dateValueHandling === 'timestamp' ? paramValue.valueOf() : Math.trunc(paramValue.valueOf() / 1000);
            }
            newParams[key] = paramValue;
        });
        return new HttpParams({ fromObject: newParams });
    }
    appliedUrl(url, params) {
        if (!params)
            return url;
        url += ~url.indexOf('?') ? '' : '?';
        const arr = [];
        Object.keys(params).forEach(key => {
            arr.push(`${key}=${params[key]}`);
        });
        return url + arr.join('&');
    }
    setCount(count) {
        Promise.resolve(null).then(() => (this.lc = count <= 0 ? 0 : count));
    }
    push() {
        this.setCount(++this.lc);
    }
    pop() {
        this.setCount(--this.lc);
    }
    /**
     * Clean loading count
     *
     * 清空加载中
     */
    cleanLoading() {
        this.setCount(0);
    }
    get(url, params, options = {}) {
        return this.request('GET', url, {
            params,
            ...options
        });
    }
    post(url, body, params, options = {}) {
        return this.request('POST', url, {
            body,
            params,
            ...options
        });
    }
    delete(url, params, options = {}) {
        return this.request('DELETE', url, {
            params,
            ...options
        });
    }
    // #endregion
    // #region jsonp
    /**
     * **JSONP Request**
     *
     * @param callbackParam CALLBACK值，默认：JSONP_CALLBACK
     */
    jsonp(url, params, callbackParam = 'JSONP_CALLBACK') {
        return of(null).pipe(delay(0), tap(() => this.push()), switchMap(() => this.http.jsonp(this.appliedUrl(url, params), callbackParam)), finalize(() => this.pop()));
    }
    patch(url, body, params, options = {}) {
        return this.request('PATCH', url, {
            body,
            params,
            ...options
        });
    }
    put(url, body, params, options = {}) {
        return this.request('PUT', url, {
            body,
            params,
            ...options
        });
    }
    form(url, body, params, options = {}) {
        return this.request('POST', url, {
            body,
            params,
            ...options,
            headers: {
                'content-type': `application/x-www-form-urlencoded`
            }
        });
    }
    request(method, url, options = {}) {
        if (options.params)
            options.params = this.parseParams(options.params);
        return of(null).pipe(delay(0), tap(() => this.push()), switchMap(() => this.http.request(method, url, options)), finalize(() => this.pop()));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: _HttpClient, deps: [{ token: i1.YunzaiConfigService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: _HttpClient, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.0.6", ngImport: i0, type: _HttpClient, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.YunzaiConfigService }] });
//# sourceMappingURL=data:application/json;base64,