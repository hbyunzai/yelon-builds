/* eslint-disable @typescript-eslint/no-explicit-any */
import { HttpResponseBase } from '@angular/common/http';
import { inject } from '@angular/core';
import { map, of } from 'rxjs';
import { YunzaiConfigService } from '@yelon/util/config';
import { CacheService } from './cache.service';
import { CACHE } from './token';
/**
 * Cache interceptor
 *
 * ç¼“å­˜æ‹¦æˆªå™¨
 *
 * @example
 * provideHttpClient(withInterceptors([httpCacheInterceptor])),
 */
export const httpCacheInterceptor = (req, next) => {
    const cog = inject(YunzaiConfigService).merge('cache', {}).interceptor;
    const options = {
        enabled: true,
        emitNotify: true,
        saveType: 'm',
        ...cog,
        ...req.context.get(CACHE)
    };
    const srv = inject(CacheService);
    const mapPipe = map(ev => save(srv, ev, options));
    if (options.enabled === false) {
        return next(req).pipe(mapPipe);
    }
    if (options.key == null) {
        options.key = req.urlWithParams;
    }
    const cacheData = srv.getNone(options.key);
    if (cacheData != null) {
        if (typeof ngDevMode === 'undefined' || ngDevMode) {
            console.log(`%cðŸ‘½${req.method}->${req.urlWithParams}->from cache(onle in development)`, 'background:#000;color:#1890ff', req, cacheData);
        }
        return of(cacheData);
    }
    return next(req).pipe(mapPipe);
};
function save(srv, ev, options) {
    if (!(ev instanceof HttpResponseBase) || !(ev.status >= 200 && ev.status < 300))
        return ev;
    let expire = options.expire;
    if (expire == null) {
        const ageMatch = /max-age=(\d+)/g.exec(ev.headers.get('cache-control')?.toLowerCase() ?? '');
        if (ageMatch == null)
            return ev;
        expire = +ageMatch[1];
    }
    if (expire > 0) {
        srv.set(options.key, ev, {
            type: options.saveType,
            expire: expire
        });
    }
    return ev;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGUuaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jYWNoZS9zcmMvY2FjaGUuaW50ZXJjZXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsdURBQXVEO0FBQ3ZELE9BQU8sRUFBZ0MsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN0RixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFvQixNQUFNLE1BQU0sQ0FBQztBQUVqRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUV6RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFnQixLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFOUM7Ozs7Ozs7R0FPRztBQUNILE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFzQixDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUNuRSxNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBRSxDQUFDLFdBQVcsQ0FBQztJQUN4RSxNQUFNLE9BQU8sR0FBaUI7UUFDNUIsT0FBTyxFQUFFLElBQUk7UUFDYixVQUFVLEVBQUUsSUFBSTtRQUNoQixRQUFRLEVBQUUsR0FBRztRQUNiLEdBQUcsR0FBRztRQUNOLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0tBQzFCLENBQUM7SUFDRixNQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDakMsTUFBTSxPQUFPLEdBQXFELEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDcEcsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQzlCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3hCLE9BQU8sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztJQUNsQyxDQUFDO0lBRUQsTUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBaUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzNELElBQUksU0FBUyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ3RCLElBQUksT0FBTyxTQUFTLEtBQUssV0FBVyxJQUFJLFNBQVMsRUFBRSxDQUFDO1lBQ2xELE9BQU8sQ0FBQyxHQUFHLENBQ1QsT0FBTyxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxhQUFhLG1DQUFtQyxFQUMxRSwrQkFBK0IsRUFDL0IsR0FBRyxFQUNILFNBQVMsQ0FDVixDQUFDO1FBQ0osQ0FBQztRQUNELE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDakMsQ0FBQyxDQUFDO0FBRUYsU0FBUyxJQUFJLENBQUMsR0FBaUIsRUFBRSxFQUFrQixFQUFFLE9BQXFCO0lBQ3hFLElBQUksQ0FBQyxDQUFDLEVBQUUsWUFBWSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUFFLE9BQU8sRUFBRSxDQUFDO0lBQzNGLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUM7SUFDNUIsSUFBSSxNQUFNLElBQUksSUFBSSxFQUFFLENBQUM7UUFDbkIsTUFBTSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQzdGLElBQUksUUFBUSxJQUFJLElBQUk7WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUNoQyxNQUFNLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUNELElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1FBQ2YsR0FBRyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBSyxFQUFFLEVBQUUsRUFBRTtZQUN6QixJQUFJLEVBQUUsT0FBTyxDQUFDLFFBQVU7WUFDeEIsTUFBTSxFQUFFLE1BQU07U0FDZixDQUFDLENBQUM7SUFDTCxDQUFDO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3JGbiwgSHR0cFJlc3BvbnNlQmFzZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgbWFwLCBvZiwgT3BlcmF0b3JGdW5jdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBZdW56YWlDb25maWdTZXJ2aWNlIH0gZnJvbSAnQHllbG9uL3V0aWwvY29uZmlnJztcblxuaW1wb3J0IHsgQ2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi9jYWNoZS5zZXJ2aWNlJztcbmltcG9ydCB7IENhY2hlT3B0aW9ucywgQ0FDSEUgfSBmcm9tICcuL3Rva2VuJztcblxuLyoqXG4gKiBDYWNoZSBpbnRlcmNlcHRvclxuICpcbiAqIOe8k+WtmOaLpuaIquWZqFxuICpcbiAqIEBleGFtcGxlXG4gKiBwcm92aWRlSHR0cENsaWVudCh3aXRoSW50ZXJjZXB0b3JzKFtodHRwQ2FjaGVJbnRlcmNlcHRvcl0pKSxcbiAqL1xuZXhwb3J0IGNvbnN0IGh0dHBDYWNoZUludGVyY2VwdG9yOiBIdHRwSW50ZXJjZXB0b3JGbiA9IChyZXEsIG5leHQpID0+IHtcbiAgY29uc3QgY29nID0gaW5qZWN0KFl1bnphaUNvbmZpZ1NlcnZpY2UpLm1lcmdlKCdjYWNoZScsIHt9KSEuaW50ZXJjZXB0b3I7XG4gIGNvbnN0IG9wdGlvbnM6IENhY2hlT3B0aW9ucyA9IHtcbiAgICBlbmFibGVkOiB0cnVlLFxuICAgIGVtaXROb3RpZnk6IHRydWUsXG4gICAgc2F2ZVR5cGU6ICdtJyxcbiAgICAuLi5jb2csXG4gICAgLi4ucmVxLmNvbnRleHQuZ2V0KENBQ0hFKVxuICB9O1xuICBjb25zdCBzcnYgPSBpbmplY3QoQ2FjaGVTZXJ2aWNlKTtcbiAgY29uc3QgbWFwUGlwZTogT3BlcmF0b3JGdW5jdGlvbjxIdHRwRXZlbnQ8YW55PiwgSHR0cEV2ZW50PGFueT4+ID0gbWFwKGV2ID0+IHNhdmUoc3J2LCBldiwgb3B0aW9ucykpO1xuICBpZiAob3B0aW9ucy5lbmFibGVkID09PSBmYWxzZSkge1xuICAgIHJldHVybiBuZXh0KHJlcSkucGlwZShtYXBQaXBlKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmtleSA9PSBudWxsKSB7XG4gICAgb3B0aW9ucy5rZXkgPSByZXEudXJsV2l0aFBhcmFtcztcbiAgfVxuXG4gIGNvbnN0IGNhY2hlRGF0YSA9IHNydi5nZXROb25lPEh0dHBFdmVudDxhbnk+PihvcHRpb25zLmtleSk7XG4gIGlmIChjYWNoZURhdGEgIT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgbmdEZXZNb2RlID09PSAndW5kZWZpbmVkJyB8fCBuZ0Rldk1vZGUpIHtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgJWPwn5G9JHtyZXEubWV0aG9kfS0+JHtyZXEudXJsV2l0aFBhcmFtc30tPmZyb20gY2FjaGUob25sZSBpbiBkZXZlbG9wbWVudClgLFxuICAgICAgICAnYmFja2dyb3VuZDojMDAwO2NvbG9yOiMxODkwZmYnLFxuICAgICAgICByZXEsXG4gICAgICAgIGNhY2hlRGF0YVxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mKGNhY2hlRGF0YSk7XG4gIH1cblxuICByZXR1cm4gbmV4dChyZXEpLnBpcGUobWFwUGlwZSk7XG59O1xuXG5mdW5jdGlvbiBzYXZlKHNydjogQ2FjaGVTZXJ2aWNlLCBldjogSHR0cEV2ZW50PGFueT4sIG9wdGlvbnM6IENhY2hlT3B0aW9ucyk6IEh0dHBFdmVudDxhbnk+IHtcbiAgaWYgKCEoZXYgaW5zdGFuY2VvZiBIdHRwUmVzcG9uc2VCYXNlKSB8fCAhKGV2LnN0YXR1cyA+PSAyMDAgJiYgZXYuc3RhdHVzIDwgMzAwKSkgcmV0dXJuIGV2O1xuICBsZXQgZXhwaXJlID0gb3B0aW9ucy5leHBpcmU7XG4gIGlmIChleHBpcmUgPT0gbnVsbCkge1xuICAgIGNvbnN0IGFnZU1hdGNoID0gL21heC1hZ2U9KFxcZCspL2cuZXhlYyhldi5oZWFkZXJzLmdldCgnY2FjaGUtY29udHJvbCcpPy50b0xvd2VyQ2FzZSgpID8/ICcnKTtcbiAgICBpZiAoYWdlTWF0Y2ggPT0gbnVsbCkgcmV0dXJuIGV2O1xuICAgIGV4cGlyZSA9ICthZ2VNYXRjaFsxXTtcbiAgfVxuICBpZiAoZXhwaXJlID4gMCkge1xuICAgIHNydi5zZXQob3B0aW9ucy5rZXkhISwgZXYsIHtcbiAgICAgIHR5cGU6IG9wdGlvbnMuc2F2ZVR5cGUhISxcbiAgICAgIGV4cGlyZTogZXhwaXJlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGV2O1xufVxuIl19